'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _contract_wrapper = require('./contract_wrapper');

var _contract_wrapper2 = _interopRequireDefault(_contract_wrapper);

var _web3_tools = require('../utils/web3_tools');

var _contract_jsons = require('../contract_jsons');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MultisigWrapper = function (_ContractWrapper) {
  (0, _inherits3.default)(MultisigWrapper, _ContractWrapper);

  function MultisigWrapper(contractAddress, web3, defaultAddress) {
    (0, _classCallCheck3.default)(this, MultisigWrapper);

    var _this = (0, _possibleConstructorReturn3.default)(this, (MultisigWrapper.__proto__ || Object.getPrototypeOf(MultisigWrapper)).call(this, web3, defaultAddress));

    _this.address = contractAddress;
    _this.contract = (0, _web3_tools.loadContract)(web3, _contract_jsons.multisig.abi, contractAddress);
    return _this;
  }

  (0, _createClass3.default)(MultisigWrapper, [{
    key: 'getPendingTransaction',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var count;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.contract.methods.getTransactionCount(true, false).call();

              case 2:
                count = _context.sent;
                return _context.abrupt('return', this.contract.methods.getTransactionIds(0, count, true, false).call());

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getPendingTransaction() {
        return _ref.apply(this, arguments);
      }

      return getPendingTransaction;
    }()
  }, {
    key: 'getConfirmations',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(transactionId) {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt('return', this.contract.methods.getConfirmations(transactionId).call());

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getConfirmations(_x) {
        return _ref2.apply(this, arguments);
      }

      return getConfirmations;
    }()
  }, {
    key: 'getConfirmationCount',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(transactionId) {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt('return', this.contract.methods.getConfirmationCount(transactionId).call());

              case 1:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getConfirmationCount(_x2) {
        return _ref3.apply(this, arguments);
      }

      return getConfirmationCount;
    }()
  }, {
    key: 'confirmationsRequired',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt('return', this.contract.methods.required().call());

              case 1:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function confirmationsRequired() {
        return _ref4.apply(this, arguments);
      }

      return confirmationsRequired;
    }()
  }, {
    key: 'submitTransaction',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(destination, value, data) {
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt('return', this.processTransaction(this.contract.methods.submitTransaction(destination, value, data)));

              case 1:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function submitTransaction(_x3, _x4, _x5) {
        return _ref5.apply(this, arguments);
      }

      return submitTransaction;
    }()
  }, {
    key: 'confirmTransaction',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(transactionId) {
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt('return', this.processTransaction(this.contract.methods.confirmTransaction(transactionId)));

              case 1:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function confirmTransaction(_x6) {
        return _ref6.apply(this, arguments);
      }

      return confirmTransaction;
    }()
  }, {
    key: 'revokeConfirmation',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(transactionId) {
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt('return', this.processTransaction(this.contract.methods.revokeConfirmation(transactionId)));

              case 1:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function revokeConfirmation(_x7) {
        return _ref7.apply(this, arguments);
      }

      return revokeConfirmation;
    }()
  }, {
    key: 'getTransaction',
    value: function () {
      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(transactionId) {
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                return _context8.abrupt('return', this.contract.methods.transactions(transactionId).call());

              case 1:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getTransaction(_x8) {
        return _ref8.apply(this, arguments);
      }

      return getTransaction;
    }()
  }, {
    key: 'addOwner',
    value: function addOwner(ownerAddress) {
      return this.contract.methods.addOwner(ownerAddress).encodeABI();
    }
  }, {
    key: 'removeOwner',
    value: function removeOwner(ownerAddress) {
      return this.contract.methods.removeOwner(ownerAddress).encodeABI();
    }
  }, {
    key: 'changeRequirement',
    value: function changeRequirement(newRequiredConfirmationsCount) {
      return this.contract.methods.changeRequirement(newRequiredConfirmationsCount).encodeABI();
    }
  }, {
    key: 'getOwners',
    value: function () {
      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {
        return _regenerator2.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                return _context9.abrupt('return', this.contract.methods.getOwners().call());

              case 1:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getOwners() {
        return _ref9.apply(this, arguments);
      }

      return getOwners;
    }()
  }]);
  return MultisigWrapper;
}(_contract_wrapper2.default); /*
                               Copyright: Ambrosus Inc.
                               Email: tech@ambrosus.com
                               
                               This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
                               
                               This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
                               */

exports.default = MultisigWrapper;