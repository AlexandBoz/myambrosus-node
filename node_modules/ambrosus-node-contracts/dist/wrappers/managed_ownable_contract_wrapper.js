'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _managed_contract_wrapper = require('./managed_contract_wrapper');

var _managed_contract_wrapper2 = _interopRequireDefault(_managed_contract_wrapper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @abstract */
var ManagedOwnableContractWrapper = function (_ManagedContractWrapp) {
  (0, _inherits3.default)(ManagedOwnableContractWrapper, _ManagedContractWrapp);

  function ManagedOwnableContractWrapper() {
    (0, _classCallCheck3.default)(this, ManagedOwnableContractWrapper);
    return (0, _possibleConstructorReturn3.default)(this, (ManagedOwnableContractWrapper.__proto__ || Object.getPrototypeOf(ManagedOwnableContractWrapper)).apply(this, arguments));
  }

  (0, _createClass3.default)(ManagedOwnableContractWrapper, [{
    key: 'getOwner',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var contract;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.contract();

              case 2:
                contract = _context.sent;
                return _context.abrupt('return', contract.methods.owner().call());

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getOwner() {
        return _ref.apply(this, arguments);
      }

      return getOwner;
    }()
  }, {
    key: 'transferOwnership',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(newOwnerAddress) {
        var contract;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.contract();

              case 2:
                contract = _context2.sent;
                return _context2.abrupt('return', this.processTransaction(contract.methods.transferOwnership(newOwnerAddress)));

              case 4:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function transferOwnership(_x) {
        return _ref2.apply(this, arguments);
      }

      return transferOwnership;
    }()
  }]);
  return ManagedOwnableContractWrapper;
}(_managed_contract_wrapper2.default); /*
                                       Copyright: Ambrosus Inc.
                                       Email: tech@ambrosus.com
                                       
                                       This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
                                       
                                       This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
                                       */

exports.default = ManagedOwnableContractWrapper;