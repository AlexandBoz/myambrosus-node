'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var BlockchainStateWrapper = function () {
  function BlockchainStateWrapper(web3) {
    (0, _classCallCheck3.default)(this, BlockchainStateWrapper);

    this.web3 = web3;
  }

  (0, _createClass3.default)(BlockchainStateWrapper, [{
    key: 'getBlockTimestamp',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(blockNumber) {
        var blockData, timestamp;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.web3.eth.getBlock(blockNumber);

              case 2:
                blockData = _context.sent;
                timestamp = blockData.timestamp;
                return _context.abrupt('return', timestamp);

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getBlockTimestamp(_x) {
        return _ref.apply(this, arguments);
      }

      return getBlockTimestamp;
    }()
  }, {
    key: 'isAddressAContract',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(address) {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.web3.eth.getCode(address);

              case 2:
                _context2.t0 = _context2.sent;
                return _context2.abrupt('return', _context2.t0 !== '0x0');

              case 4:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function isAddressAContract(_x2) {
        return _ref2.apply(this, arguments);
      }

      return isAddressAContract;
    }()
  }, {
    key: 'getBalance',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(address) {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt('return', this.web3.eth.getBalance(address));

              case 1:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getBalance(_x3) {
        return _ref3.apply(this, arguments);
      }

      return getBalance;
    }()
  }, {
    key: 'getCurrentBlockNumber',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt('return', this.web3.eth.getBlockNumber());

              case 1:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getCurrentBlockNumber() {
        return _ref4.apply(this, arguments);
      }

      return getCurrentBlockNumber;
    }()
  }]);
  return BlockchainStateWrapper;
}();

exports.default = BlockchainStateWrapper;