'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _contract_jsons = require('../contract_jsons');

var _contract_jsons2 = _interopRequireDefault(_contract_jsons);

var _web3_tools = require('../utils/web3_tools');

var _genesis_contract_wrapper = require('./genesis_contract_wrapper');

var _genesis_contract_wrapper2 = _interopRequireDefault(_genesis_contract_wrapper);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var HeadWrapper = function (_GenesisContractWrapp) {
  (0, _inherits3.default)(HeadWrapper, _GenesisContractWrapp);

  function HeadWrapper(headContractAddress, web3, defaultAddress) {
    (0, _classCallCheck3.default)(this, HeadWrapper);

    var _this = (0, _possibleConstructorReturn3.default)(this, (HeadWrapper.__proto__ || Object.getPrototypeOf(HeadWrapper)).call(this, headContractAddress, _contract_jsons2.default.head, web3, defaultAddress));

    _this.clearContractAddressCache();

    _this.availableCatalogueContracts = ['kycWhitelist', 'roles', 'fees', 'time', 'challenges', 'payouts', 'shelteringTransfers', 'sheltering', 'uploads', 'config', 'validatorProxy'];

    _this.availableStorageCatalogueContracts = ['apolloDepositStore', 'atlasStakeStore', 'bundleStore', 'challengesStore', 'kycWhitelistStore', 'payoutsStore', 'rolesStore', 'shelteringTransfersStore', 'challengesEventEmitter', 'transfersEventEmitter', 'rewardsEventEmitter', 'rolesEventEmitter'];
    return _this;
  }

  (0, _createClass3.default)(HeadWrapper, [{
    key: 'contractAddressByName',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(contractName) {
        var catalogue, storageCatalogue;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.availableCatalogueContracts.includes(contractName)) {
                  _context.next = 13;
                  break;
                }

                _context.next = 3;
                return this.catalogue();

              case 3:
                catalogue = _context.sent;

                if (!this.isNotInContractAddressCache(contractName)) {
                  _context.next = 11;
                  break;
                }

                _context.t0 = this;
                _context.t1 = contractName;
                _context.next = 9;
                return catalogue.methods[contractName + '()']().call();

              case 9:
                _context.t2 = _context.sent;

                _context.t0.updateContractAddressCache.call(_context.t0, _context.t1, _context.t2);

              case 11:
                _context.next = 27;
                break;

              case 13:
                if (!this.availableStorageCatalogueContracts.includes(contractName)) {
                  _context.next = 26;
                  break;
                }

                _context.next = 16;
                return this.storageCatalogue();

              case 16:
                storageCatalogue = _context.sent;

                if (!this.isNotInContractAddressCache(contractName)) {
                  _context.next = 24;
                  break;
                }

                _context.t3 = this;
                _context.t4 = contractName;
                _context.next = 22;
                return storageCatalogue.methods[contractName + '()']().call();

              case 22:
                _context.t5 = _context.sent;

                _context.t3.updateContractAddressCache.call(_context.t3, _context.t4, _context.t5);

              case 24:
                _context.next = 27;
                break;

              case 26:
                throw new Error('Requested contract does not exist');

              case 27:
                return _context.abrupt('return', this.cachedAddresses['' + contractName]);

              case 28:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function contractAddressByName(_x) {
        return _ref.apply(this, arguments);
      }

      return contractAddressByName;
    }()
  }, {
    key: 'setContext',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(address) {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.contract.methods.setContext(address).send({
                  from: this.defaultAddress
                });

              case 2:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function setContext(_x2) {
        return _ref2.apply(this, arguments);
      }

      return setContext;
    }()
  }, {
    key: 'context',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        var contextAddress;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.contract.methods.context().call();

              case 2:
                contextAddress = _context3.sent;

                if (!(contextAddress === _constants.ZERO_ADDRESS)) {
                  _context3.next = 5;
                  break;
                }

                throw 'Context address is not set in the head contract';

              case 5:
                if (this.cachedContractAddressHasChanged(contextAddress, 'context')) {
                  this.clearContractAddressCache();
                  this.updateContractAddressCache('context', contextAddress);
                }
                return _context3.abrupt('return', (0, _web3_tools.loadContract)(this.web3, _contract_jsons2.default.context.abi, contextAddress));

              case 7:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function context() {
        return _ref3.apply(this, arguments);
      }

      return context;
    }()
  }, {
    key: 'catalogue',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        var context;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.context();

              case 2:
                context = _context4.sent;

                if (!this.isNotInContractAddressCache('catalogue')) {
                  _context4.next = 9;
                  break;
                }

                _context4.t0 = this;
                _context4.next = 7;
                return context.methods.catalogue().call();

              case 7:
                _context4.t1 = _context4.sent;

                _context4.t0.updateContractAddressCache.call(_context4.t0, 'catalogue', _context4.t1);

              case 9:
                return _context4.abrupt('return', (0, _web3_tools.loadContract)(this.web3, _contract_jsons2.default.catalogue.abi, this.cachedAddresses.catalogue));

              case 10:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function catalogue() {
        return _ref4.apply(this, arguments);
      }

      return catalogue;
    }()
  }, {
    key: 'storageCatalogue',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
        var context;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.context();

              case 2:
                context = _context5.sent;

                if (!this.isNotInContractAddressCache('storageCatalogue')) {
                  _context5.next = 9;
                  break;
                }

                _context5.t0 = this;
                _context5.next = 7;
                return context.methods.storageCatalogue().call();

              case 7:
                _context5.t1 = _context5.sent;

                _context5.t0.updateContractAddressCache.call(_context5.t0, 'storageCatalogue', _context5.t1);

              case 9:
                return _context5.abrupt('return', (0, _web3_tools.loadContract)(this.web3, _contract_jsons2.default.storageCatalogue.abi, this.cachedAddresses.storageCatalogue));

              case 10:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function storageCatalogue() {
        return _ref5.apply(this, arguments);
      }

      return storageCatalogue;
    }()
  }, {
    key: 'clearContractAddressCache',
    value: function clearContractAddressCache() {
      this.cachedAddresses = {};
    }
  }, {
    key: 'isNotInContractAddressCache',
    value: function isNotInContractAddressCache(contractName) {
      return !('' + contractName in this.cachedAddresses);
    }
  }, {
    key: 'cachedContractAddressHasChanged',
    value: function cachedContractAddressHasChanged(contractAddress, contractName) {
      return contractAddress !== this.cachedAddresses['' + contractName];
    }
  }, {
    key: 'updateContractAddressCache',
    value: function updateContractAddressCache(contractName, contractAddress) {
      this.cachedAddresses['' + contractName] = contractAddress;
    }
  }, {
    key: 'contractsVersion',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.context();

              case 2:
                return _context6.abrupt('return', _context6.sent.methods.versionTag().call());

              case 3:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function contractsVersion() {
        return _ref6.apply(this, arguments);
      }

      return contractsVersion;
    }()
  }]);
  return HeadWrapper;
}(_genesis_contract_wrapper2.default);

exports.default = HeadWrapper;