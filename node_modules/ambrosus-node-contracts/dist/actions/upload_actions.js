'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _bn = require('bn.js');

var _bn2 = _interopRequireDefault(_bn);

var _errors = require('../errors/errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var UploadActions = function () {
  function UploadActions(uploadsWrapper, feesWrapper, shelteringWrapper, blockchainStateWrapper, challengesEventEmitterWrapper) {
    var lowFundsWarningAmount = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '0';
    (0, _classCallCheck3.default)(this, UploadActions);

    this.uploadsWrapper = uploadsWrapper;
    this.feesWrapper = feesWrapper;
    this.shelteringWrapper = shelteringWrapper;
    this.blockchainStateWrapper = blockchainStateWrapper;
    this.challengesEventEmitterWrapper = challengesEventEmitterWrapper;
    this.lowFundsWarningAmount = new _bn2.default(lowFundsWarningAmount);
  }

  (0, _createClass3.default)(UploadActions, [{
    key: 'uploadBundle',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(bundleId, storagePeriods) {
        var fee, balance, _ref2, blockNumber, transactionHash, timestamp;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.feesWrapper.feeForUpload(storagePeriods);

              case 2:
                fee = _context.sent;
                _context.next = 5;
                return this.getBalance();

              case 5:
                balance = _context.sent;

                if (!new _bn2.default(balance).lte(new _bn2.default(fee))) {
                  _context.next = 8;
                  break;
                }

                throw new _errors.InsufficientFundsToUploadBundleError(fee, balance);

              case 8:
                _context.next = 10;
                return this.uploadsWrapper.registerBundle(bundleId, fee, storagePeriods);

              case 10:
                _ref2 = _context.sent;
                blockNumber = _ref2.blockNumber;
                transactionHash = _ref2.transactionHash;
                _context.next = 15;
                return this.blockchainStateWrapper.getBlockTimestamp(blockNumber);

              case 15:
                timestamp = _context.sent;
                return _context.abrupt('return', {
                  blockNumber: blockNumber,
                  transactionHash: transactionHash,
                  timestamp: timestamp,
                  lowBalanceWarning: new _bn2.default(balance).lt(this.lowFundsWarningAmount),
                  approximateBalanceAfterUpload: new _bn2.default(balance).sub(new _bn2.default(fee)).toString()
                });

              case 17:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function uploadBundle(_x2, _x3) {
        return _ref.apply(this, arguments);
      }

      return uploadBundle;
    }()
  }, {
    key: 'getBalance',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt('return', this.blockchainStateWrapper.getBalance(this.uploadsWrapper.defaultAddress));

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getBalance() {
        return _ref3.apply(this, arguments);
      }

      return getBalance;
    }()
  }, {
    key: 'getBundleUploadData',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(bundleId) {
        var uploadBlock, timestamp, events, _events$find, transactionHash;

        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.shelteringWrapper.getBundleUploadBlockNumber(bundleId);

              case 2:
                uploadBlock = _context3.sent;

                if (uploadBlock) {
                  _context3.next = 5;
                  break;
                }

                return _context3.abrupt('return', null);

              case 5:
                _context3.next = 7;
                return this.blockchainStateWrapper.getBlockTimestamp(uploadBlock);

              case 7:
                timestamp = _context3.sent;
                _context3.next = 10;
                return this.challengesEventEmitterWrapper.challenges(uploadBlock, uploadBlock);

              case 10:
                events = _context3.sent;
                _events$find = events.find(function (_ref5) {
                  var returnValues = _ref5.returnValues;
                  return returnValues.bundleId === bundleId;
                }), transactionHash = _events$find.transactionHash;
                return _context3.abrupt('return', { blockNumber: uploadBlock, transactionHash: transactionHash, timestamp: timestamp });

              case 13:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getBundleUploadData(_x4) {
        return _ref4.apply(this, arguments);
      }

      return getBundleUploadData;
    }()
  }]);
  return UploadActions;
}();

exports.default = UploadActions;