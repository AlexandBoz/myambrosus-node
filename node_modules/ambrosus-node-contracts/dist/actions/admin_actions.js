'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var AdministrativeActions = function () {
  function AdministrativeActions(headWrapper, kycWhitelistWrapper, feesWrapper, validatorProxyWrapper, blockchainStateWrapper) {
    (0, _classCallCheck3.default)(this, AdministrativeActions);

    this.headWrapper = headWrapper;
    this.kycWhitelistWrapper = kycWhitelistWrapper;
    this.feesWrapper = feesWrapper;
    this.validatorProxyWrapper = validatorProxyWrapper;
    this.blockchainStateWrapper = blockchainStateWrapper;
  }

  (0, _createClass3.default)(AdministrativeActions, [{
    key: 'moveOwnershipsToMultiplexer',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(multiplexerAddress) {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.headWrapper.transferOwnership(multiplexerAddress);

              case 2:
                _context.next = 4;
                return this.kycWhitelistWrapper.transferOwnership(multiplexerAddress);

              case 4:
                _context.next = 6;
                return this.feesWrapper.transferOwnership(multiplexerAddress);

              case 6:
                _context.next = 8;
                return this.validatorProxyWrapper.transferOwnership(multiplexerAddress);

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function moveOwnershipsToMultiplexer(_x) {
        return _ref.apply(this, arguments);
      }

      return moveOwnershipsToMultiplexer;
    }()
  }, {
    key: 'switchContext',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(newContextAddress) {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.headWrapper.getOwner();

              case 2:
                _context2.t0 = _context2.sent;
                _context2.t1 = this.headWrapper.defaultAddress;

                if (!(_context2.t0 !== _context2.t1)) {
                  _context2.next = 6;
                  break;
                }

                throw new Error('You need to be the owner of the Head contract to perform a context switch');

              case 6:
                _context2.next = 8;
                return this.blockchainStateWrapper.isAddressAContract(newContextAddress);

              case 8:
                if (_context2.sent) {
                  _context2.next = 10;
                  break;
                }

                throw new Error('Provided address is not a contract');

              case 10:
                _context2.next = 12;
                return this.headWrapper.setContext(newContextAddress);

              case 12:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function switchContext(_x2) {
        return _ref2.apply(this, arguments);
      }

      return switchContext;
    }()
  }]);
  return AdministrativeActions;
}();

exports.default = AdministrativeActions;