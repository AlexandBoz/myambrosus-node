'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _bn = require('bn.js');

var _bn2 = _interopRequireDefault(_bn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FIRST_MEANINGFUL_PERIOD = 630; // May 2018

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var PayoutsActions = function () {
  function PayoutsActions(timeWrapper, payoutsWrapper) {
    (0, _classCallCheck3.default)(this, PayoutsActions);

    this.timeWrapper = timeWrapper;
    this.payoutsWrapper = payoutsWrapper;
  }

  (0, _createClass3.default)(PayoutsActions, [{
    key: 'currentPayoutPeriod',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt('return', this.timeWrapper.currentPayoutPeriod());

              case 1:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function currentPayoutPeriod() {
        return _ref.apply(this, arguments);
      }

      return currentPayoutPeriod;
    }()
  }, {
    key: 'nextPayoutPeriodStart',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var nextPayoutPeriod;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.t0 = parseInt;
                _context2.next = 3;
                return this.currentPayoutPeriod();

              case 3:
                _context2.t1 = _context2.sent;
                _context2.t2 = (0, _context2.t0)(_context2.t1, 10);
                nextPayoutPeriod = _context2.t2 + 1;
                return _context2.abrupt('return', this.timeWrapper.payoutPeriodStart(nextPayoutPeriod));

              case 7:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function nextPayoutPeriodStart() {
        return _ref2.apply(this, arguments);
      }

      return nextPayoutPeriodStart;
    }()
  }, {
    key: 'getTotalAvailablePayout',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        var currentPayout, availablePayout, ind;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.t0 = parseInt;
                _context3.next = 3;
                return this.currentPayoutPeriod();

              case 3:
                _context3.t1 = _context3.sent;
                currentPayout = (0, _context3.t0)(_context3.t1, 10);
                availablePayout = new _bn2.default('0');
                ind = FIRST_MEANINGFUL_PERIOD;

              case 7:
                if (!(ind < currentPayout)) {
                  _context3.next = 18;
                  break;
                }

                _context3.t2 = availablePayout;
                _context3.t3 = _bn2.default;
                _context3.next = 12;
                return this.payoutsWrapper.availablePayoutAmountInPeriod(ind);

              case 12:
                _context3.t4 = _context3.sent;
                _context3.t5 = new _context3.t3(_context3.t4);
                availablePayout = _context3.t2.add.call(_context3.t2, _context3.t5);

              case 15:
                ind++;
                _context3.next = 7;
                break;

              case 18:
                return _context3.abrupt('return', availablePayout.toString());

              case 19:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getTotalAvailablePayout() {
        return _ref3.apply(this, arguments);
      }

      return getTotalAvailablePayout;
    }()
  }, {
    key: 'withdraw',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.payoutsWrapper.withdraw();

              case 2:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function withdraw() {
        return _ref4.apply(this, arguments);
      }

      return withdraw;
    }()
  }]);
  return PayoutsActions;
}();

exports.default = PayoutsActions;