'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var MultisigActions = function () {
  function MultisigActions(multisigWrapper, multiplexerWrapper, multisigFunctions) {
    (0, _classCallCheck3.default)(this, MultisigActions);

    this.multisigWrapper = multisigWrapper;
    this.multiplexerWrapper = multiplexerWrapper;
    this.multisigFunctions = multisigFunctions;
  }

  (0, _createClass3.default)(MultisigActions, [{
    key: 'getTransactionCallFromData',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(transactionId) {
        var _ref2, data, name, args;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.multisigWrapper.getTransaction(transactionId);

              case 2:
                _ref2 = _context.sent;
                data = _ref2.data;
                name = this.multisigFunctions.getFunctionName(data);
                args = this.multisigFunctions.getFunctionArguments(data);
                return _context.abrupt('return', { name: name, args: args, transactionId: transactionId });

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getTransactionCallFromData(_x) {
        return _ref.apply(this, arguments);
      }

      return getTransactionCallFromData;
    }()
  }, {
    key: 'allPendingTransactions',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var requiredConfirmations, allPendingTransactionIds, allPendingTransactions, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, txId, confirmationCount;

        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.confirmationsRequired();

              case 2:
                requiredConfirmations = _context2.sent;
                _context2.next = 5;
                return this.multisigWrapper.getPendingTransaction();

              case 5:
                allPendingTransactionIds = _context2.sent;
                allPendingTransactions = [];
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context2.prev = 10;
                _iterator = allPendingTransactionIds[Symbol.iterator]();

              case 12:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context2.next = 32;
                  break;
                }

                txId = _step.value;
                _context2.t0 = parseInt;
                _context2.next = 17;
                return this.multisigWrapper.getConfirmationCount(txId);

              case 17:
                _context2.t1 = _context2.sent;
                confirmationCount = (0, _context2.t0)(_context2.t1, 10);

                if (!(confirmationCount < requiredConfirmations)) {
                  _context2.next = 29;
                  break;
                }

                _context2.t2 = allPendingTransactions;
                _context2.t3 = _extends3.default;
                _context2.t4 = {};
                _context2.next = 25;
                return this.getTransactionCallFromData(txId);

              case 25:
                _context2.t5 = _context2.sent;
                _context2.t6 = {
                  confirmations: {
                    required: requiredConfirmations,
                    confirmed: confirmationCount
                  }
                };
                _context2.t7 = (0, _context2.t3)(_context2.t4, _context2.t5, _context2.t6);

                _context2.t2.push.call(_context2.t2, _context2.t7);

              case 29:
                _iteratorNormalCompletion = true;
                _context2.next = 12;
                break;

              case 32:
                _context2.next = 38;
                break;

              case 34:
                _context2.prev = 34;
                _context2.t8 = _context2['catch'](10);
                _didIteratorError = true;
                _iteratorError = _context2.t8;

              case 38:
                _context2.prev = 38;
                _context2.prev = 39;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 41:
                _context2.prev = 41;

                if (!_didIteratorError) {
                  _context2.next = 44;
                  break;
                }

                throw _iteratorError;

              case 44:
                return _context2.finish(41);

              case 45:
                return _context2.finish(38);

              case 46:
                return _context2.abrupt('return', allPendingTransactions);

              case 47:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[10, 34, 38, 46], [39,, 41, 45]]);
      }));

      function allPendingTransactions() {
        return _ref3.apply(this, arguments);
      }

      return allPendingTransactions;
    }()
  }, {
    key: 'confirmationsRequired',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.t0 = parseInt;
                _context3.next = 3;
                return this.multisigWrapper.confirmationsRequired();

              case 3:
                _context3.t1 = _context3.sent;
                return _context3.abrupt('return', (0, _context3.t0)(_context3.t1, 10));

              case 5:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function confirmationsRequired() {
        return _ref4.apply(this, arguments);
      }

      return confirmationsRequired;
    }()
  }, {
    key: 'approvableTransactions',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        var allPendingTransactions, approvableTransactions, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, transaction, confirmations;

        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.allPendingTransactions();

              case 2:
                allPendingTransactions = _context4.sent;
                approvableTransactions = [];
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context4.prev = 7;
                _iterator2 = allPendingTransactions[Symbol.iterator]();

              case 9:
                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                  _context4.next = 18;
                  break;
                }

                transaction = _step2.value;
                _context4.next = 13;
                return this.multisigWrapper.getConfirmations(transaction.transactionId);

              case 13:
                confirmations = _context4.sent;

                if (!confirmations.includes(this.multisigWrapper.defaultAddress)) {
                  approvableTransactions.push(transaction);
                }

              case 15:
                _iteratorNormalCompletion2 = true;
                _context4.next = 9;
                break;

              case 18:
                _context4.next = 24;
                break;

              case 20:
                _context4.prev = 20;
                _context4.t0 = _context4['catch'](7);
                _didIteratorError2 = true;
                _iteratorError2 = _context4.t0;

              case 24:
                _context4.prev = 24;
                _context4.prev = 25;

                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }

              case 27:
                _context4.prev = 27;

                if (!_didIteratorError2) {
                  _context4.next = 30;
                  break;
                }

                throw _iteratorError2;

              case 30:
                return _context4.finish(27);

              case 31:
                return _context4.finish(24);

              case 32:
                return _context4.abrupt('return', approvableTransactions);

              case 33:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this, [[7, 20, 24, 32], [25,, 27, 31]]);
      }));

      function approvableTransactions() {
        return _ref5.apply(this, arguments);
      }

      return approvableTransactions;
    }()
  }, {
    key: 'checkIfTransactionDitNotFail',
    value: function checkIfTransactionDitNotFail(transactionData) {
      if (transactionData.events.ExecutionFailure) {
        throw new Error('Transaction #' + transactionData.events.ExecutionFailure.returnValues.transactionId + ' has been rejected');
      }
      return transactionData;
    }
  }, {
    key: 'submitTransaction',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(data) {
        var senderAddress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.multiplexerWrapper.address();
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.t0 = this;
                _context5.next = 3;
                return this.multisigWrapper.submitTransaction(senderAddress, '0', data);

              case 3:
                _context5.t1 = _context5.sent;
                return _context5.abrupt('return', _context5.t0.checkIfTransactionDitNotFail.call(_context5.t0, _context5.t1));

              case 5:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function submitTransaction(_x2) {
        return _ref6.apply(this, arguments);
      }

      return submitTransaction;
    }()
  }, {
    key: 'transferMultiplexerOwnership',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(address) {
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.t0 = this;
                _context6.next = 3;
                return this.multiplexerWrapper.transferOwnership(address);

              case 3:
                _context6.t1 = _context6.sent;
                return _context6.abrupt('return', _context6.t0.submitTransaction.call(_context6.t0, _context6.t1));

              case 5:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function transferMultiplexerOwnership(_x4) {
        return _ref7.apply(this, arguments);
      }

      return transferMultiplexerOwnership;
    }()
  }, {
    key: 'transferContractsOwnership',
    value: function () {
      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(address) {
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.t0 = this;
                _context7.next = 3;
                return this.multiplexerWrapper.transferContractsOwnership(address);

              case 3:
                _context7.t1 = _context7.sent;
                return _context7.abrupt('return', _context7.t0.submitTransaction.call(_context7.t0, _context7.t1));

              case 5:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function transferContractsOwnership(_x5) {
        return _ref8.apply(this, arguments);
      }

      return transferContractsOwnership;
    }()
  }, {
    key: 'changeContext',
    value: function () {
      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(contextAddress) {
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.t0 = this;
                _context8.next = 3;
                return this.multiplexerWrapper.changeContext(contextAddress);

              case 3:
                _context8.t1 = _context8.sent;
                return _context8.abrupt('return', _context8.t0.submitTransaction.call(_context8.t0, _context8.t1));

              case 5:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function changeContext(_x6) {
        return _ref9.apply(this, arguments);
      }

      return changeContext;
    }()
  }, {
    key: 'addToWhitelist',
    value: function () {
      var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(candidateAddress, role, deposit) {
        return _regenerator2.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.t0 = this;
                _context9.next = 3;
                return this.multiplexerWrapper.addToWhitelist(candidateAddress, role, deposit);

              case 3:
                _context9.t1 = _context9.sent;
                return _context9.abrupt('return', _context9.t0.submitTransaction.call(_context9.t0, _context9.t1));

              case 5:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function addToWhitelist(_x7, _x8, _x9) {
        return _ref10.apply(this, arguments);
      }

      return addToWhitelist;
    }()
  }, {
    key: 'removeFromWhitelist',
    value: function () {
      var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10(candidateAddress) {
        return _regenerator2.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.t0 = this;
                _context10.next = 3;
                return this.multiplexerWrapper.removeFromWhitelist(candidateAddress);

              case 3:
                _context10.t1 = _context10.sent;
                return _context10.abrupt('return', _context10.t0.submitTransaction.call(_context10.t0, _context10.t1));

              case 5:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function removeFromWhitelist(_x10) {
        return _ref11.apply(this, arguments);
      }

      return removeFromWhitelist;
    }()
  }, {
    key: 'setBaseUploadFee',
    value: function () {
      var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(fee) {
        return _regenerator2.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.t0 = this;
                _context11.next = 3;
                return this.multiplexerWrapper.setBaseUploadFee(fee);

              case 3:
                _context11.t1 = _context11.sent;
                return _context11.abrupt('return', _context11.t0.submitTransaction.call(_context11.t0, _context11.t1));

              case 5:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function setBaseUploadFee(_x11) {
        return _ref12.apply(this, arguments);
      }

      return setBaseUploadFee;
    }()
  }, {
    key: 'setBaseReward',
    value: function () {
      var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(newBaseReward) {
        return _regenerator2.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.t0 = this;
                _context12.next = 3;
                return this.multiplexerWrapper.setBaseReward(newBaseReward);

              case 3:
                _context12.t1 = _context12.sent;
                return _context12.abrupt('return', _context12.t0.submitTransaction.call(_context12.t0, _context12.t1));

              case 5:
              case 'end':
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function setBaseReward(_x12) {
        return _ref13.apply(this, arguments);
      }

      return setBaseReward;
    }()
  }, {
    key: 'transferOwnershipForValidatorSet',
    value: function () {
      var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13(address) {
        return _regenerator2.default.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.t0 = this;
                _context13.next = 3;
                return this.multiplexerWrapper.transferOwnershipForValidatorSet(address);

              case 3:
                _context13.t1 = _context13.sent;
                return _context13.abrupt('return', _context13.t0.submitTransaction.call(_context13.t0, _context13.t1));

              case 5:
              case 'end':
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function transferOwnershipForValidatorSet(_x13) {
        return _ref14.apply(this, arguments);
      }

      return transferOwnershipForValidatorSet;
    }()
  }, {
    key: 'transferOwnershipForBlockRewards',
    value: function () {
      var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14(address) {
        return _regenerator2.default.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.t0 = this;
                _context14.next = 3;
                return this.multiplexerWrapper.transferOwnershipForBlockRewards(address);

              case 3:
                _context14.t1 = _context14.sent;
                return _context14.abrupt('return', _context14.t0.submitTransaction.call(_context14.t0, _context14.t1));

              case 5:
              case 'end':
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function transferOwnershipForBlockRewards(_x14) {
        return _ref15.apply(this, arguments);
      }

      return transferOwnershipForBlockRewards;
    }()
  }, {
    key: 'confirmTransaction',
    value: function () {
      var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15(transactionId) {
        return _regenerator2.default.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.t0 = this;
                _context15.next = 3;
                return this.multisigWrapper.confirmTransaction(transactionId);

              case 3:
                _context15.t1 = _context15.sent;
                return _context15.abrupt('return', _context15.t0.checkIfTransactionDitNotFail.call(_context15.t0, _context15.t1));

              case 5:
              case 'end':
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function confirmTransaction(_x15) {
        return _ref16.apply(this, arguments);
      }

      return confirmTransaction;
    }()
  }, {
    key: 'revokeConfirmation',
    value: function () {
      var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16(transactionId) {
        return _regenerator2.default.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                return _context16.abrupt('return', this.multisigWrapper.revokeConfirmation(transactionId));

              case 1:
              case 'end':
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function revokeConfirmation(_x16) {
        return _ref17.apply(this, arguments);
      }

      return revokeConfirmation;
    }()
  }, {
    key: 'addOwner',
    value: function () {
      var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17(newOwnerAddress) {
        return _regenerator2.default.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.t0 = this;
                _context17.next = 3;
                return this.multisigWrapper.addOwner(newOwnerAddress);

              case 3:
                _context17.t1 = _context17.sent;
                _context17.t2 = this.multisigWrapper.address;
                return _context17.abrupt('return', _context17.t0.submitTransaction.call(_context17.t0, _context17.t1, _context17.t2));

              case 6:
              case 'end':
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function addOwner(_x17) {
        return _ref18.apply(this, arguments);
      }

      return addOwner;
    }()
  }, {
    key: 'removeOwner',
    value: function () {
      var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(ownerAddress) {
        return _regenerator2.default.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.t0 = this;
                _context18.next = 3;
                return this.multisigWrapper.removeOwner(ownerAddress);

              case 3:
                _context18.t1 = _context18.sent;
                _context18.t2 = this.multisigWrapper.address;
                return _context18.abrupt('return', _context18.t0.submitTransaction.call(_context18.t0, _context18.t1, _context18.t2));

              case 6:
              case 'end':
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function removeOwner(_x18) {
        return _ref19.apply(this, arguments);
      }

      return removeOwner;
    }()
  }, {
    key: 'changeRequirement',
    value: function () {
      var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19(newRequiredConfirmationsCount) {
        return _regenerator2.default.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.t0 = this;
                _context19.next = 3;
                return this.multisigWrapper.changeRequirement(newRequiredConfirmationsCount);

              case 3:
                _context19.t1 = _context19.sent;
                _context19.t2 = this.multisigWrapper.address;
                return _context19.abrupt('return', _context19.t0.submitTransaction.call(_context19.t0, _context19.t1, _context19.t2));

              case 6:
              case 'end':
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function changeRequirement(_x19) {
        return _ref20.apply(this, arguments);
      }

      return changeRequirement;
    }()
  }, {
    key: 'getOwners',
    value: function () {
      var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20() {
        return _regenerator2.default.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                return _context20.abrupt('return', this.multisigWrapper.getOwners());

              case 1:
              case 'end':
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function getOwners() {
        return _ref21.apply(this, arguments);
      }

      return getOwners;
    }()
  }]);
  return MultisigActions;
}();

exports.default = MultisigActions;