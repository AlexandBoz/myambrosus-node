'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _contract_jsons = require('../contract_jsons');

var _contract_jsons2 = _interopRequireDefault(_contract_jsons);

var _package = require('../../package');

var _constants = require('../constants');

var _block_reward_functions = require('../utils/block_reward_functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var DeployActions = function () {
  function DeployActions(deployer, headWrapper, validatorSetWrapper, blockRewardsWrapper, validatorProxyWrapper) {
    (0, _classCallCheck3.default)(this, DeployActions);

    this.deployer = deployer;
    this.sender = this.deployer.sender;
    this.headWrapper = headWrapper;
    this.validatorSetWrapper = validatorSetWrapper;
    this.blockRewardsWrapper = blockRewardsWrapper;
    this.validatorProxyWrapper = validatorProxyWrapper;
    this.defaultBlockReward = (0, _block_reward_functions.convertRateToBaseReward)(_constants.DEFAULT_BLOCK_RATE);
  }

  (0, _createClass3.default)(DeployActions, [{
    key: 'deployGenesis',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(initialValidators) {
        var baseReward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultBlockReward;
        var headJson, validatorSetJson, blockRewardsJson, head, validatorSet, blockRewards;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                headJson = _contract_jsons2.default.head, validatorSetJson = _contract_jsons2.default.validatorSet, blockRewardsJson = _contract_jsons2.default.blockRewards;
                _context.next = 3;
                return this.deployer.deployContract(headJson, [this.sender], {});

              case 3:
                head = _context.sent;
                _context.next = 6;
                return this.deployer.deployContract(validatorSetJson, [this.sender, initialValidators, this.sender], {});

              case 6:
                validatorSet = _context.sent;
                _context.next = 9;
                return this.deployer.deployContract(blockRewardsJson, [this.sender, baseReward, this.sender], {});

              case 9:
                blockRewards = _context.sent;
                return _context.abrupt('return', { head: head, validatorSet: validatorSet, blockRewards: blockRewards });

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function deployGenesis(_x) {
        return _ref.apply(this, arguments);
      }

      return deployGenesis;
    }()
  }, {
    key: 'deployInitial',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var turbo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var overrides, contractsToDeploy, genesisContracts;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                overrides = turbo ? _contract_jsons.contractSuperSpeedJsons : {};
                contractsToDeploy = (0, _extends3.default)({}, _contract_jsons2.default, overrides);
                genesisContracts = {
                  head: this.headWrapper.address(),
                  validatorSet: this.validatorSetWrapper.address(),
                  blockRewards: this.blockRewardsWrapper.address()
                };
                return _context2.abrupt('return', this.deployer.deploy(contractsToDeploy, genesisContracts, [], { multiplexer: { owner: this.sender } }, _package.version));

              case 4:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function deployInitial() {
        return _ref2.apply(this, arguments);
      }

      return deployInitial;
    }()
  }, {
    key: 'deployUpdate',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        var turbo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var overrides, contractsToDeploy, recycledContracts, genesisContracts;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                overrides = turbo ? _contract_jsons.contractSuperSpeedJsons : {};
                contractsToDeploy = (0, _extends3.default)({}, _contract_jsons2.default, overrides);
                _context3.next = 4;
                return this.recycleStorageContracts();

              case 4:
                recycledContracts = _context3.sent;
                genesisContracts = {
                  head: this.headWrapper.address(),
                  validatorSet: this.validatorSetWrapper.address(),
                  blockRewards: this.blockRewardsWrapper.address()
                };
                _context3.next = 8;
                return this.regainGenesisContractsOwnership();

              case 8:
                return _context3.abrupt('return', this.deployer.deploy(contractsToDeploy, (0, _extends3.default)({}, genesisContracts, recycledContracts), [], { multiplexer: { owner: this.sender } }, _package.version));

              case 9:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function deployUpdate() {
        return _ref3.apply(this, arguments);
      }

      return deployUpdate;
    }()
  }, {
    key: 'recycleStorageContracts',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        var storageContractNames, recycled, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, contractName;

        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                storageContractNames = this.headWrapper.availableStorageCatalogueContracts;
                recycled = {};
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context4.prev = 5;
                _iterator = storageContractNames[Symbol.iterator]();

              case 7:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context4.next = 15;
                  break;
                }

                contractName = _step.value;
                _context4.next = 11;
                return this.headWrapper.contractAddressByName(contractName);

              case 11:
                recycled[contractName] = _context4.sent;

              case 12:
                _iteratorNormalCompletion = true;
                _context4.next = 7;
                break;

              case 15:
                _context4.next = 21;
                break;

              case 17:
                _context4.prev = 17;
                _context4.t0 = _context4['catch'](5);
                _didIteratorError = true;
                _iteratorError = _context4.t0;

              case 21:
                _context4.prev = 21;
                _context4.prev = 22;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 24:
                _context4.prev = 24;

                if (!_didIteratorError) {
                  _context4.next = 27;
                  break;
                }

                throw _iteratorError;

              case 27:
                return _context4.finish(24);

              case 28:
                return _context4.finish(21);

              case 29:
                return _context4.abrupt('return', recycled);

              case 30:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this, [[5, 17, 21, 29], [22,, 24, 28]]);
      }));

      function recycleStorageContracts() {
        return _ref4.apply(this, arguments);
      }

      return recycleStorageContracts;
    }()
  }, {
    key: 'regainGenesisContractsOwnership',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
        var validatorProxyOwner, validatorProxyAddress, validatorSetOwner, blockRewardsOwner;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.validatorProxyWrapper.getOwner();

              case 2:
                validatorProxyOwner = _context5.sent;
                _context5.next = 5;
                return this.validatorProxyWrapper.address();

              case 5:
                validatorProxyAddress = _context5.sent;
                _context5.next = 8;
                return this.validatorSetWrapper.getOwner();

              case 8:
                validatorSetOwner = _context5.sent;

                if (!(validatorSetOwner === this.sender)) {
                  _context5.next = 12;
                  break;
                }

                _context5.next = 18;
                break;

              case 12:
                if (!(validatorProxyOwner === this.sender && validatorSetOwner === validatorProxyAddress)) {
                  _context5.next = 17;
                  break;
                }

                _context5.next = 15;
                return this.validatorProxyWrapper.transferOwnershipForValidatorSet(this.sender);

              case 15:
                _context5.next = 18;
                break;

              case 17:
                throw 'Failed to regain ownership for validator set contract from it\'s current owner: ' + validatorSetOwner;

              case 18:
                _context5.next = 20;
                return this.blockRewardsWrapper.getOwner();

              case 20:
                blockRewardsOwner = _context5.sent;

                if (!(blockRewardsOwner === this.sender)) {
                  _context5.next = 24;
                  break;
                }

                _context5.next = 30;
                break;

              case 24:
                if (!(validatorProxyOwner === this.sender && blockRewardsOwner === validatorProxyAddress)) {
                  _context5.next = 29;
                  break;
                }

                _context5.next = 27;
                return this.validatorProxyWrapper.transferOwnershipForBlockRewards(this.sender);

              case 27:
                _context5.next = 30;
                break;

              case 29:
                throw 'Failed to regain ownership for block rewards contract from it\'s current owner: ' + blockRewardsOwner;

              case 30:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function regainGenesisContractsOwnership() {
        return _ref5.apply(this, arguments);
      }

      return regainGenesisContractsOwnership;
    }()
  }]);
  return DeployActions;
}();

exports.default = DeployActions;