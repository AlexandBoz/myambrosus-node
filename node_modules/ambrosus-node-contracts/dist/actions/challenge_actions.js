'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _bn = require('bn.js');

var _bn2 = _interopRequireDefault(_bn);

var _errors = require('../errors/errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var ChallengeActions = function () {
  function ChallengeActions(challengeWrapper, feeWrapper, shelteringWrapper, blockchainStateWrapper, atlasStakeStoreWrapper) {
    (0, _classCallCheck3.default)(this, ChallengeActions);

    this.challengeWrapper = challengeWrapper;
    this.feeWrapper = feeWrapper;
    this.shelteringWrapper = shelteringWrapper;
    this.blockchainStateWrapper = blockchainStateWrapper;
    this.atlasStakeStoreWrapper = atlasStakeStoreWrapper;
  }

  (0, _createClass3.default)(ChallengeActions, [{
    key: 'startChallenge',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(sheltererId, bundleId) {
        var challengeId, storagePeriods, fee, balance, _ref2, blockNumber, transactionHash;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.shelteringWrapper.isSheltering(bundleId, sheltererId);

              case 2:
                if (_context.sent) {
                  _context.next = 4;
                  break;
                }

                throw new Error(sheltererId + ' is not sherltering ' + bundleId);

              case 4:
                _context.next = 6;
                return this.challengeWrapper.getChallengeId(sheltererId, bundleId);

              case 6:
                challengeId = _context.sent;
                _context.next = 9;
                return this.challengeWrapper.isInProgress(challengeId);

              case 9:
                if (!_context.sent) {
                  _context.next = 11;
                  break;
                }

                throw new Error('Could not start a challenge: same challenge is currently in progress');

              case 11:
                _context.next = 13;
                return this.shelteringWrapper.bundleStoragePeriods(bundleId);

              case 13:
                storagePeriods = _context.sent;
                _context.next = 16;
                return this.feeWrapper.feeForChallenge(storagePeriods);

              case 16:
                fee = _context.sent;
                _context.next = 19;
                return this.getBalance();

              case 19:
                balance = _context.sent;

                if (!new _bn2.default(balance).lte(new _bn2.default(fee))) {
                  _context.next = 22;
                  break;
                }

                throw new _errors.InsufficientFundsToStartChallengeError(fee, balance);

              case 22:
                _context.next = 24;
                return this.challengeWrapper.start(sheltererId, bundleId, fee);

              case 24:
                _ref2 = _context.sent;
                blockNumber = _ref2.blockNumber;
                transactionHash = _ref2.transactionHash;
                return _context.abrupt('return', {
                  blockNumber: blockNumber,
                  transactionHash: transactionHash,
                  challengeId: challengeId
                });

              case 28:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function startChallenge(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return startChallenge;
    }()
  }, {
    key: 'markAsExpired',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(challengeId) {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.challengeWrapper.isInProgress(challengeId);

              case 2:
                if (_context2.sent) {
                  _context2.next = 4;
                  break;
                }

                throw new Error('Challenge ' + challengeId + ' not found');

              case 4:
                _context2.next = 6;
                return this.challengeWrapper.challengeIsTimedOut(challengeId);

              case 6:
                if (_context2.sent) {
                  _context2.next = 8;
                  break;
                }

                throw new Error('Challenge ' + challengeId + ' cannot be marked as expired');

              case 8:
                return _context2.abrupt('return', this.challengeWrapper.markAsExpired(challengeId));

              case 9:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function markAsExpired(_x3) {
        return _ref3.apply(this, arguments);
      }

      return markAsExpired;
    }()
  }, {
    key: 'challengeStatus',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(challengeId) {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.challengeWrapper.isInProgress(challengeId);

              case 2:
                if (_context3.sent) {
                  _context3.next = 4;
                  break;
                }

                return _context3.abrupt('return', { isInProgress: false });

              case 4:
                _context3.next = 6;
                return this.challengeWrapper.canResolve(challengeId);

              case 6:
                _context3.t0 = _context3.sent;
                _context3.next = 9;
                return this.challengeWrapper.challengeIsTimedOut(challengeId);

              case 9:
                _context3.t1 = _context3.sent;
                return _context3.abrupt('return', {
                  isInProgress: true,
                  canResolve: _context3.t0,
                  isTimedOut: _context3.t1
                });

              case 11:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function challengeStatus(_x4) {
        return _ref4.apply(this, arguments);
      }

      return challengeStatus;
    }()

    /** @private */

  }, {
    key: 'getBalance',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt('return', this.blockchainStateWrapper.getBalance(this.challengeWrapper.defaultAddress));

              case 1:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getBalance() {
        return _ref5.apply(this, arguments);
      }

      return getBalance;
    }()
  }, {
    key: 'nextPenalty',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(nodeAddress) {
        var basicStake, _ref7, penaltiesCount, lastPenaltyTime;

        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.atlasStakeStoreWrapper.getBasicStake(nodeAddress);

              case 2:
                basicStake = _context5.sent;

                if (!(basicStake === '0')) {
                  _context5.next = 5;
                  break;
                }

                throw new Error('Node ' + nodeAddress + ' is not onboarded as an ATLAS');

              case 5:
                _context5.next = 7;
                return this.atlasStakeStoreWrapper.getPenaltiesHistory(nodeAddress);

              case 7:
                _ref7 = _context5.sent;
                penaltiesCount = _ref7.penaltiesCount;
                lastPenaltyTime = _ref7.lastPenaltyTime;
                _context5.next = 12;
                return this.feeWrapper.getPenalty(basicStake, penaltiesCount, lastPenaltyTime);

              case 12:
                return _context5.abrupt('return', _context5.sent.penalty);

              case 13:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function nextPenalty(_x5) {
        return _ref6.apply(this, arguments);
      }

      return nextPenalty;
    }()
  }]);
  return ChallengeActions;
}();

exports.default = ChallengeActions;