'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _constants = require('../constants');

var _web3_tools = require('../utils/web3_tools');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var OnboardActions = function () {
  function OnboardActions(kycWhitelistWrapper, rolesWrapper, atlasStakeWrapper) {
    (0, _classCallCheck3.default)(this, OnboardActions);

    this.kycWhitelistWrapper = kycWhitelistWrapper;
    this.rolesWrapper = rolesWrapper;
    this.atlasStakeWrapper = atlasStakeWrapper;
  }

  (0, _createClass3.default)(OnboardActions, [{
    key: 'onboardAsAtlas',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(address, stakeAmount, url) {
        var roles;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.validateWhitelistedForRole(address, _constants.ATLAS);

              case 2:
                _context.next = 4;
                return this.validateAtlasStakeAmount(address, stakeAmount);

              case 4:
                roles = this.rolesWrapper;
                _context.next = 7;
                return roles.onboardAsAtlas(address, stakeAmount, url);

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function onboardAsAtlas(_x, _x2, _x3) {
        return _ref.apply(this, arguments);
      }

      return onboardAsAtlas;
    }()
  }, {
    key: 'onboardAsHermes',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(address, url) {
        var roles;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.validateWhitelistedForRole(address, _constants.HERMES);

              case 2:
                roles = this.rolesWrapper;
                _context2.next = 5;
                return roles.onboardAsHermes(address, url);

              case 5:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function onboardAsHermes(_x4, _x5) {
        return _ref2.apply(this, arguments);
      }

      return onboardAsHermes;
    }()
  }, {
    key: 'onboardAsApollo',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(address, depositAmount) {
        var roles;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.validateWhitelistedForRole(address, _constants.APOLLO);

              case 2:
                _context3.next = 4;
                return this.validateApolloDepositAmount(address, depositAmount);

              case 4:
                roles = this.rolesWrapper;
                _context3.next = 7;
                return roles.onboardAsApollo(address, depositAmount);

              case 7:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function onboardAsApollo(_x6, _x7) {
        return _ref3.apply(this, arguments);
      }

      return onboardAsApollo;
    }()
  }, {
    key: 'getOnboardedRole',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(address) {
        var roles;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                roles = this.rolesWrapper;
                _context4.next = 3;
                return roles.onboardedRole(address);

              case 3:
                _context4.t0 = _context4.sent;
                _context4.next = 6;
                return roles.nodeUrl(address);

              case 6:
                _context4.t1 = _context4.sent;
                return _context4.abrupt('return', {
                  role: _context4.t0,
                  url: _context4.t1
                });

              case 8:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getOnboardedRole(_x8) {
        return _ref4.apply(this, arguments);
      }

      return getOnboardedRole;
    }()
  }, {
    key: 'validateWhitelistedForRole',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(address, role) {
        var kyc;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                kyc = this.kycWhitelistWrapper;
                _context5.next = 3;
                return kyc.hasRoleAssigned(address, role);

              case 3:
                if (_context5.sent) {
                  _context5.next = 5;
                  break;
                }

                throw new Error('Address ' + address + ' is not white-listed for the ' + _constants.ROLE_REVERSE_CODES[role] + ' role.');

              case 5:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function validateWhitelistedForRole(_x9, _x10) {
        return _ref5.apply(this, arguments);
      }

      return validateWhitelistedForRole;
    }()
  }, {
    key: 'validateAtlasStakeAmount',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(address, amount) {
        var requiredAmount;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.requiredAmount(address);

              case 2:
                requiredAmount = _context6.sent;

                if (requiredAmount.eq(_web3_tools.utils.toBN(amount))) {
                  _context6.next = 5;
                  break;
                }

                throw new Error('Address ' + address + ' requires a stake of ' + requiredAmount + ' but ' + amount + ' provided.');

              case 5:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function validateAtlasStakeAmount(_x11, _x12) {
        return _ref6.apply(this, arguments);
      }

      return validateAtlasStakeAmount;
    }()
  }, {
    key: 'validateApolloDepositAmount',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(address, amount) {
        var requiredAmount;
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.requiredAmount(address);

              case 2:
                requiredAmount = _context7.sent;

                if (!requiredAmount.gt(_web3_tools.utils.toBN(amount))) {
                  _context7.next = 5;
                  break;
                }

                throw new Error('Address ' + address + ' requires a minimum deposit of ' + requiredAmount + ' but ' + amount + ' provided.');

              case 5:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function validateApolloDepositAmount(_x13, _x14) {
        return _ref7.apply(this, arguments);
      }

      return validateApolloDepositAmount;
    }()
  }, {
    key: 'requiredAmount',
    value: function () {
      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(address) {
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.t0 = _web3_tools.utils;
                _context8.next = 3;
                return this.kycWhitelistWrapper.getRequiredDeposit(address);

              case 3:
                _context8.t1 = _context8.sent;
                return _context8.abrupt('return', _context8.t0.toBN.call(_context8.t0, _context8.t1));

              case 5:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function requiredAmount(_x15) {
        return _ref8.apply(this, arguments);
      }

      return requiredAmount;
    }()
  }, {
    key: 'retire',
    value: function () {
      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {
        var role;
        return _regenerator2.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.rolesWrapper.onboardedRole(this.rolesWrapper.defaultAddress);

              case 2:
                role = _context9.sent;
                _context9.t0 = role;
                _context9.next = _context9.t0 === _constants.ATLAS ? 6 : _context9.t0 === _constants.APOLLO ? 11 : _context9.t0 === _constants.HERMES ? 12 : 13;
                break;

              case 6:
                _context9.next = 8;
                return this.atlasStakeWrapper.isShelteringAny(this.atlasStakeWrapper.defaultAddress);

              case 8:
                if (!_context9.sent) {
                  _context9.next = 10;
                  break;
                }

                throw new Error('Cannot retire while still sheltering bundles');

              case 10:
                return _context9.abrupt('return', this.rolesWrapper.retireAtlas());

              case 11:
                return _context9.abrupt('return', this.rolesWrapper.retireApollo());

              case 12:
                return _context9.abrupt('return', this.rolesWrapper.retireHermes());

              case 13:
                throw new Error('The node is not onboarded');

              case 14:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function retire() {
        return _ref9.apply(this, arguments);
      }

      return retire;
    }()
  }]);
  return OnboardActions;
}();

exports.default = OnboardActions;