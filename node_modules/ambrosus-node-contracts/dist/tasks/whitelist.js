'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _task_base = require('./base/task_base');

var _task_base2 = _interopRequireDefault(_task_base);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var WhitelistTask = function (_TaskBase) {
  (0, _inherits3.default)(WhitelistTask, _TaskBase);

  function WhitelistTask(web3, whitelistActions, onboardActions) {
    (0, _classCallCheck3.default)(this, WhitelistTask);

    var _this = (0, _possibleConstructorReturn3.default)(this, (WhitelistTask.__proto__ || Object.getPrototypeOf(WhitelistTask)).call(this));

    _this.web3 = web3;
    _this.whitelistActions = whitelistActions;
    _this.onboardActions = onboardActions;
    return _this;
  }

  (0, _createClass3.default)(WhitelistTask, [{
    key: 'execute',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(args) {
        var _args, command;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _args = (0, _slicedToArray3.default)(args, 1), command = _args[0];

                if (!(command === 'add')) {
                  _context.next = 6;
                  break;
                }

                _context.next = 4;
                return this.add(args[1], args[2], args[3]);

              case 4:
                _context.next = 18;
                break;

              case 6:
                if (!(command === 'remove')) {
                  _context.next = 11;
                  break;
                }

                _context.next = 9;
                return this.remove(args[1]);

              case 9:
                _context.next = 18;
                break;

              case 11:
                if (!(command === 'get')) {
                  _context.next = 16;
                  break;
                }

                _context.next = 14;
                return this.get(args[1]);

              case 14:
                _context.next = 18;
                break;

              case 16:
                console.error('Unknown sub-command, use: yarn task whitelist [add/remove] [address] [role] [requiredDeposit]');
                process.exit(1);

              case 18:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function execute(_x) {
        return _ref.apply(this, arguments);
      }

      return execute;
    }()
  }, {
    key: 'validateAddress',
    value: function validateAddress(address) {
      if (!this.web3.utils.isAddress(address)) {
        throw 'Invalid address: ' + address;
      }
    }
  }, {
    key: 'add',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(address, role, requiredDeposit) {
        var deposit;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;

                this.validateAddress(address);
                deposit = this.web3.utils.toWei(requiredDeposit, 'ether');
                _context2.next = 5;
                return this.whitelistActions.add(address, _constants.ROLE_CODES[role], deposit);

              case 5:
                _context2.next = 11;
                break;

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2['catch'](0);

                console.error(_context2.t0.message);
                process.exit(1);

              case 11:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 7]]);
      }));

      function add(_x2, _x3, _x4) {
        return _ref2.apply(this, arguments);
      }

      return add;
    }()
  }, {
    key: 'remove',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(address) {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;

                this.validateAddress(address);
                _context3.next = 4;
                return this.whitelistActions.remove(address);

              case 4:
                _context3.next = 10;
                break;

              case 6:
                _context3.prev = 6;
                _context3.t0 = _context3['catch'](0);

                console.error(_context3.t0.message);
                process.exit(1);

              case 10:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this, [[0, 6]]);
      }));

      function remove(_x5) {
        return _ref3.apply(this, arguments);
      }

      return remove;
    }()
  }, {
    key: 'get',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(address) {
        var whitelisted, onboardedRole;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;

                this.validateAddress(address);
                _context4.next = 4;
                return this.whitelistActions.get(address);

              case 4:
                whitelisted = _context4.sent;

                console.log('Address ' + address + ' is whitelisted for the ' + _constants.ROLE_REVERSE_CODES[whitelisted.role] + ' role with ' + this.web3.utils.fromWei(whitelisted.requiredDeposit, 'ether') + ' AMB deposit/stake');
                _context4.next = 8;
                return this.onboardActions.getOnboardedRole(address);

              case 8:
                onboardedRole = _context4.sent;

                console.log('Address ' + address + ' is onboarded for the ' + _constants.ROLE_REVERSE_CODES[onboardedRole.role] + ' role with url: ' + onboardedRole.url);
                _context4.next = 16;
                break;

              case 12:
                _context4.prev = 12;
                _context4.t0 = _context4['catch'](0);

                console.error(_context4.t0.message);
                process.exit(1);

              case 16:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this, [[0, 12]]);
      }));

      function get(_x6) {
        return _ref4.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: 'help',
    value: function help() {
      return {
        options: '[add/remove/get] [address]',
        description: 'manages list of whitelisted node candidates'
      };
    }
  }]);
  return WhitelistTask;
}(_task_base2.default);

exports.default = WhitelistTask;