'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _toArray2 = require('babel-runtime/helpers/toArray');

var _toArray3 = _interopRequireDefault(_toArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _task_base = require('./base/task_base');

var _task_base2 = _interopRequireDefault(_task_base);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var OnboardingTask = function (_TaskBase) {
  (0, _inherits3.default)(OnboardingTask, _TaskBase);

  function OnboardingTask(web3, nodeAddress, onboardActions) {
    (0, _classCallCheck3.default)(this, OnboardingTask);

    var _this = (0, _possibleConstructorReturn3.default)(this, (OnboardingTask.__proto__ || Object.getPrototypeOf(OnboardingTask)).call(this));

    _this.web3 = web3;
    _this.onboardActions = onboardActions;
    _this.nodeAddress = nodeAddress;
    return _this;
  }

  (0, _createClass3.default)(OnboardingTask, [{
    key: 'execute',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref2) {
        var _ref3 = (0, _toArray3.default)(_ref2),
            role = _ref3[0],
            options = _ref3.slice(1);

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = role;
                _context.next = _context.t0 === 'ATLAS' ? 3 : _context.t0 === 'HERMES' ? 6 : _context.t0 === 'APOLLO' ? 9 : 12;
                break;

              case 3:
                _context.next = 5;
                return this.onboardAtlas(options);

              case 5:
                return _context.abrupt('break', 15);

              case 6:
                _context.next = 8;
                return this.onboardHermes(options);

              case 8:
                return _context.abrupt('break', 15);

              case 9:
                _context.next = 11;
                return this.onboardApollo(options);

              case 11:
                return _context.abrupt('break', 15);

              case 12:
                console.error('Unknown role: ' + role);
                this.printUsage();
                process.exit(1);

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function execute(_x) {
        return _ref.apply(this, arguments);
      }

      return execute;
    }()
  }, {
    key: 'printUsage',
    value: function printUsage() {
      console.log('\nUsage: yarn task onboard [role] [amount] [url]');
      console.log('Available roles are:');
      console.log(_constants.ATLAS + ' - ATLAS  (stakes: required in AMB, url: required)');
      console.log(_constants.HERMES + ' - HERMES (no stakes; url required)');
      console.log(_constants.APOLLO + ' - APOLLO (stakes: required in AMB; no url)');
    }
  }, {
    key: 'onboardAtlas',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(_ref5) {
        var _ref6 = (0, _slicedToArray3.default)(_ref5, 2),
            stakeAmountInEth = _ref6[0],
            url = _ref6[1];

        var stakeAmount;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(!url || !stakeAmountInEth)) {
                  _context2.next = 5;
                  break;
                }

                console.error('Invalid parameters for Atlas onboarding');
                this.printUsage();
                process.exit(1);
                return _context2.abrupt('return');

              case 5:
                stakeAmount = this.web3.utils.toWei(stakeAmountInEth, 'ether');
                _context2.next = 8;
                return this.onboardActions.onboardAsAtlas(this.nodeAddress, stakeAmount, url);

              case 8:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function onboardAtlas(_x2) {
        return _ref4.apply(this, arguments);
      }

      return onboardAtlas;
    }()
  }, {
    key: 'onboardHermes',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(_ref8) {
        var _ref9 = (0, _slicedToArray3.default)(_ref8, 1),
            url = _ref9[0];

        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (url) {
                  _context3.next = 5;
                  break;
                }

                console.error('Invalid parameters for Hermes onboarding');
                this.printUsage();
                process.exit(1);
                return _context3.abrupt('return');

              case 5:
                _context3.next = 7;
                return this.onboardActions.onboardAsHermes(this.nodeAddress, url);

              case 7:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function onboardHermes(_x3) {
        return _ref7.apply(this, arguments);
      }

      return onboardHermes;
    }()
  }, {
    key: 'onboardApollo',
    value: function () {
      var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(_ref11) {
        var _ref12 = (0, _slicedToArray3.default)(_ref11, 1),
            depositAmountInEth = _ref12[0];

        var depositAmount;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (depositAmountInEth) {
                  _context4.next = 5;
                  break;
                }

                console.error('Invalid parameters for Apollo onboarding');
                this.printUsage();
                process.exit(1);
                return _context4.abrupt('return');

              case 5:
                depositAmount = this.web3.utils.toWei(depositAmountInEth, 'ether');
                _context4.next = 8;
                return this.onboardActions.onboardAsApollo(this.nodeAddress, depositAmount);

              case 8:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function onboardApollo(_x4) {
        return _ref10.apply(this, arguments);
      }

      return onboardApollo;
    }()
  }, {
    key: 'help',
    value: function help() {
      return {
        options: '[amount] [url]',
        description: 'manages stake'
      };
    }
  }]);
  return OnboardingTask;
}(_task_base2.default);

exports.default = OnboardingTask;