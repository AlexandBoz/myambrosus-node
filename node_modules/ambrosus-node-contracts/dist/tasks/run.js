'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _web3_tools = require('../utils/web3_tools');

var _deployer = require('../deployer');

var _deployer2 = _interopRequireDefault(_deployer);

var _whitelist = require('./whitelist');

var _whitelist2 = _interopRequireDefault(_whitelist);

var _deploy = require('./deploy');

var _deploy2 = _interopRequireDefault(_deploy);

var _deploy_genesis = require('./deploy_genesis');

var _deploy_genesis2 = _interopRequireDefault(_deploy_genesis);

var _deploy_multisig = require('./deploy_multisig');

var _deploy_multisig2 = _interopRequireDefault(_deploy_multisig);

var _onboard = require('./onboard');

var _onboard2 = _interopRequireDefault(_onboard);

var _task_list = require('./base/task_list');

var _task_list2 = _interopRequireDefault(_task_list);

var _upload = require('./upload');

var _upload2 = _interopRequireDefault(_upload);

var _payouts = require('./payouts');

var _payouts2 = _interopRequireDefault(_payouts);

var _challenge = require('./challenge');

var _challenge2 = _interopRequireDefault(_challenge);

var _head_wrapper = require('../wrappers/head_wrapper');

var _head_wrapper2 = _interopRequireDefault(_head_wrapper);

var _validator_set_wrapper = require('../wrappers/validator_set_wrapper');

var _validator_set_wrapper2 = _interopRequireDefault(_validator_set_wrapper);

var _block_rewards_wrapper = require('../wrappers/block_rewards_wrapper');

var _block_rewards_wrapper2 = _interopRequireDefault(_block_rewards_wrapper);

var _validator_proxy_wrapper = require('../wrappers/validator_proxy_wrapper');

var _validator_proxy_wrapper2 = _interopRequireDefault(_validator_proxy_wrapper);

var _roles_wrapper = require('../wrappers/roles_wrapper');

var _roles_wrapper2 = _interopRequireDefault(_roles_wrapper);

var _uploads_wrapper = require('../wrappers/uploads_wrapper');

var _uploads_wrapper2 = _interopRequireDefault(_uploads_wrapper);

var _fees_wrapper = require('../wrappers/fees_wrapper');

var _fees_wrapper2 = _interopRequireDefault(_fees_wrapper);

var _kyc_whitelist_wrapper = require('../wrappers/kyc_whitelist_wrapper');

var _kyc_whitelist_wrapper2 = _interopRequireDefault(_kyc_whitelist_wrapper);

var _deploy_actions = require('../actions/deploy_actions');

var _deploy_actions2 = _interopRequireDefault(_deploy_actions);

var _whitelist_actions = require('../actions/whitelist_actions');

var _whitelist_actions2 = _interopRequireDefault(_whitelist_actions);

var _onboard_actions = require('../actions/onboard_actions');

var _onboard_actions2 = _interopRequireDefault(_onboard_actions);

var _upload_actions = require('../actions/upload_actions');

var _upload_actions2 = _interopRequireDefault(_upload_actions);

var _config = require('../../config/config');

var _config2 = _interopRequireDefault(_config);

var _sheltering_wrapper = require('../wrappers/sheltering_wrapper');

var _sheltering_wrapper2 = _interopRequireDefault(_sheltering_wrapper);

var _node_service = require('./node_service');

var _node_service2 = _interopRequireDefault(_node_service);

var _node_service3 = require('../actions/node_service');

var _node_service4 = _interopRequireDefault(_node_service3);

var _payouts_actions = require('../actions/payouts_actions');

var _payouts_actions2 = _interopRequireDefault(_payouts_actions);

var _admin_actions = require('../actions/admin_actions');

var _admin_actions2 = _interopRequireDefault(_admin_actions);

var _time_wrapper = require('../wrappers/time_wrapper');

var _time_wrapper2 = _interopRequireDefault(_time_wrapper);

var _payouts_wrapper = require('../wrappers/payouts_wrapper');

var _payouts_wrapper2 = _interopRequireDefault(_payouts_wrapper);

var _challenge_actions = require('../actions/challenge_actions');

var _challenge_actions2 = _interopRequireDefault(_challenge_actions);

var _challenge_wrapper = require('../wrappers/challenge_wrapper');

var _challenge_wrapper2 = _interopRequireDefault(_challenge_wrapper);

var _blockchain_state_wrapper = require('../wrappers/blockchain_state_wrapper');

var _blockchain_state_wrapper2 = _interopRequireDefault(_blockchain_state_wrapper);

var _challenges_event_emitter_wrapper = require('../wrappers/challenges_event_emitter_wrapper');

var _challenges_event_emitter_wrapper2 = _interopRequireDefault(_challenges_event_emitter_wrapper);

var _atlas_stake_store_wrapper = require('../wrappers/atlas_stake_store_wrapper');

var _atlas_stake_store_wrapper2 = _interopRequireDefault(_atlas_stake_store_wrapper);

var _retire = require('./retire');

var _retire2 = _interopRequireDefault(_retire);

var _move_ownership_to_multiplexer = require('./move_ownership_to_multiplexer');

var _move_ownership_to_multiplexer2 = _interopRequireDefault(_move_ownership_to_multiplexer);

var _multiplexer_wrapper = require('../wrappers/multiplexer_wrapper');

var _multiplexer_wrapper2 = _interopRequireDefault(_multiplexer_wrapper);

var _move_ownership_from_multiplexer = require('./move_ownership_from_multiplexer');

var _move_ownership_from_multiplexer2 = _interopRequireDefault(_move_ownership_from_multiplexer);

var _ownership = require('./ownership');

var _ownership2 = _interopRequireDefault(_ownership);

var _multisig_actions = require('../actions/multisig_actions');

var _multisig_actions2 = _interopRequireDefault(_multisig_actions);

var _multisig_wrapper = require('../wrappers/multisig_wrapper');

var _multisig_wrapper2 = _interopRequireDefault(_multisig_wrapper);

var _multisig_functions = require('../utils/multisig_functions');

var _multisig_functions2 = _interopRequireDefault(_multisig_functions);

var _multisig_owners = require('./multisig_owners');

var _multisig_owners2 = _interopRequireDefault(_multisig_owners);

var _base_fee = require('./base_fee');

var _base_fee2 = _interopRequireDefault(_base_fee);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var runTask = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    var web3, nodeAddress, deployer, headWrapper, validatorSetWrapper, blockRewardsWrapper, validatorProxyWrapper, rolesWrapper, uploadsWrapper, feesWrapper, kycWhitelistWrapper, shelteringWrapper, timeWrapper, payoutsWrapper, challengeWrapper, challengesEventEmitterWrapper, blockchainStateWrapper, atlasStakeStoreWrapper, multiplexerWrapper, multisigWrapper, deployActions, whitelistActions, onboardActions, uploadActions, nodeServiceActions, payoutsActions, challengeActions, adminActions, multisigActions, list, args;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _web3_tools.createWeb3)();

          case 2:
            web3 = _context.sent;
            nodeAddress = web3.eth.accounts.privateKeyToAccount(_config2.default.nodePrivateKey).address;
            deployer = new _deployer2.default(web3, nodeAddress);
            headWrapper = new _head_wrapper2.default(_config2.default.headContractAddress, web3, nodeAddress);
            validatorSetWrapper = new _validator_set_wrapper2.default(_config2.default.validatorSetContractAddress, web3);
            blockRewardsWrapper = new _block_rewards_wrapper2.default(_config2.default.blockRewardsContractAddress, web3);
            validatorProxyWrapper = new _validator_proxy_wrapper2.default(headWrapper, web3, nodeAddress);
            rolesWrapper = new _roles_wrapper2.default(headWrapper, web3, nodeAddress);
            uploadsWrapper = new _uploads_wrapper2.default(headWrapper, web3, nodeAddress);
            feesWrapper = new _fees_wrapper2.default(headWrapper, web3, nodeAddress);
            kycWhitelistWrapper = new _kyc_whitelist_wrapper2.default(headWrapper, web3, nodeAddress);
            shelteringWrapper = new _sheltering_wrapper2.default(headWrapper, web3, nodeAddress);
            timeWrapper = new _time_wrapper2.default(headWrapper, web3, nodeAddress);
            payoutsWrapper = new _payouts_wrapper2.default(headWrapper, web3, nodeAddress);
            challengeWrapper = new _challenge_wrapper2.default(headWrapper, web3, nodeAddress);
            challengesEventEmitterWrapper = new _challenges_event_emitter_wrapper2.default(headWrapper, web3, nodeAddress);
            blockchainStateWrapper = new _blockchain_state_wrapper2.default(web3);
            atlasStakeStoreWrapper = new _atlas_stake_store_wrapper2.default(headWrapper, web3, nodeAddress);
            multiplexerWrapper = new _multiplexer_wrapper2.default(_config2.default.multiplexerContractAddress, web3, nodeAddress);
            multisigWrapper = new _multisig_wrapper2.default(_config2.default.multisigContractAddress, web3, nodeAddress);
            deployActions = new _deploy_actions2.default(deployer, headWrapper, validatorSetWrapper, blockRewardsWrapper, validatorProxyWrapper);
            whitelistActions = new _whitelist_actions2.default(kycWhitelistWrapper);
            onboardActions = new _onboard_actions2.default(kycWhitelistWrapper, rolesWrapper, atlasStakeStoreWrapper);
            uploadActions = new _upload_actions2.default(uploadsWrapper, feesWrapper, shelteringWrapper, blockchainStateWrapper, challengesEventEmitterWrapper);
            nodeServiceActions = new _node_service4.default(rolesWrapper);
            payoutsActions = new _payouts_actions2.default(timeWrapper, payoutsWrapper);
            challengeActions = new _challenge_actions2.default(challengeWrapper, feesWrapper, shelteringWrapper, blockchainStateWrapper, atlasStakeStoreWrapper);
            adminActions = new _admin_actions2.default(headWrapper, kycWhitelistWrapper, feesWrapper, validatorProxyWrapper, blockchainStateWrapper);
            multisigActions = new _multisig_actions2.default(multisigWrapper, multiplexerWrapper, new _multisig_functions2.default(web3));
            list = new _task_list2.default();
            args = process.argv.slice(2);

            list.add('deployGenesis', new _deploy_genesis2.default(web3, deployActions));
            list.add('deploy', new _deploy2.default(deployActions));
            list.add('deployMultisig', new _deploy_multisig2.default(deployActions, multiplexerWrapper));
            list.add('onboard', new _onboard2.default(web3, nodeAddress, onboardActions));
            list.add('whitelist', new _whitelist2.default(web3, whitelistActions, onboardActions));
            list.add('upload', new _upload2.default(uploadActions));
            list.add('nodeService', new _node_service2.default(nodeAddress, nodeServiceActions));
            list.add('payouts', new _payouts2.default(web3, nodeAddress, payoutsActions));
            list.add('challenge', new _challenge2.default(challengeActions));
            list.add('retire', new _retire2.default(onboardActions));
            list.add('moveOwnershipToMultiplexer', new _move_ownership_to_multiplexer2.default(adminActions));
            list.add('moveOwnershipFromMultiplexer', new _move_ownership_from_multiplexer2.default(multisigActions));
            list.add('checkOwnership', new _ownership2.default(web3));
            list.add('multisigOwners', new _multisig_owners2.default(multisigWrapper));
            list.add('fee', new _base_fee2.default(feesWrapper));

            _context.next = 50;
            return list.run(args[0], args.slice(1));

          case 50:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function runTask() {
    return _ref.apply(this, arguments);
  };
}();

runTask().catch(function (error) {
  console.error(error);
  process.exit(1);
});