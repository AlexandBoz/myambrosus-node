'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _task_base = require('./base/task_base');

var _task_base2 = _interopRequireDefault(_task_base);

var _commandLineArgs = require('command-line-args');

var _commandLineArgs2 = _interopRequireDefault(_commandLineArgs);

var _file = require('../utils/file');

var _config = require('../../config/config');

var _config2 = _interopRequireDefault(_config);

var _contract_jsons = require('../../src/contract_jsons');

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var DeployMultisigTask = function (_TaskBase) {
  (0, _inherits3.default)(DeployMultisigTask, _TaskBase);

  function DeployMultisigTask(deployActions, multiplexerWrapper) {
    (0, _classCallCheck3.default)(this, DeployMultisigTask);

    var _this = (0, _possibleConstructorReturn3.default)(this, (DeployMultisigTask.__proto__ || Object.getPrototypeOf(DeployMultisigTask)).call(this));

    _this.deployActions = deployActions;
    _this.multiplexerWrapper = multiplexerWrapper;
    return _this;
  }

  (0, _createClass3.default)(DeployMultisigTask, [{
    key: 'execute',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(args) {
        var options, approvalAdresses, multisigContract, multiSigAddress, multisigEnvLine;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.log('Deploying MultiSigWallet contract.');

                options = this.parseOptions(args);

                if (!(options === null)) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt('return');

              case 4:
                approvalAdresses = void 0;

                if (!(_config2.default.multisigApprovalAddresses !== undefined)) {
                  _context.next = 9;
                  break;
                }

                approvalAdresses = _config2.default.multisigApprovalAddresses.split(',');
                _context.next = 11;
                break;

              case 9:
                console.error('No validators addresses entered.');
                return _context.abrupt('return');

              case 11:
                if (!(options.required > approvalAdresses.length)) {
                  _context.next = 13;
                  break;
                }

                throw new Error('There are fewer approvers than required approves (' + approvalAdresses.length + ' provided, but required at least ' + options.required + ').');

              case 13:
                _context.next = 15;
                return this.deployActions.deployer.deployContract(_contract_jsons.multisig, [approvalAdresses, options.required], {});

              case 15:
                multisigContract = _context.sent;
                multiSigAddress = multisigContract.options.address;
                _context.next = 19;
                return this.multiplexerWrapper.contract.methods.transferOwnership(multiSigAddress).send({ from: this.multiplexerWrapper.defaultAddress });

              case 19:
                console.log('\tmultisig -> ' + multiSigAddress);

                multisigEnvLine = this.multisigToEnvFile(multisigContract);

                if (!options.save) {
                  _context.next = 24;
                  break;
                }

                _context.next = 24;
                return (0, _file.appendEnvFile)(options.save, multisigEnvLine);

              case 24:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function execute(_x) {
        return _ref.apply(this, arguments);
      }

      return execute;
    }()
  }, {
    key: 'parseOptions',
    value: function parseOptions(args) {
      var options = (0, _commandLineArgs2.default)([{ name: 'save', type: String }, { name: 'required', type: Number, default: _constants.APPROVALS_REQUIRED }], { argv: args, partial: true });
      // eslint-disable-next-line no-underscore-dangle
      var unknownOptions = options._unknown;
      if (unknownOptions && unknownOptions.length > 0) {
        console.error('Unknown options: ' + unknownOptions.join(', '));
        return null;
      }

      if (options.save === null) {
        console.error('You should provide a value for the save parameter.');
        return null;
      }

      return options;
    }
  }, {
    key: 'multisigToEnvFile',
    value: function multisigToEnvFile(multisigContract) {
      return 'MULTISIG_CONTRACT_ADDRESS="' + multisigContract.options.address + '"\n';
    }
  }]);
  return DeployMultisigTask;
}(_task_base2.default);

exports.default = DeployMultisigTask;