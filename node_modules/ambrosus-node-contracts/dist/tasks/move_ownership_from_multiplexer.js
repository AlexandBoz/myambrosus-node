'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _task_base = require('./base/task_base');

var _task_base2 = _interopRequireDefault(_task_base);

var _web3_tools = require('../utils/web3_tools');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var MoveOwnershipFromMultiplexerTask = function (_TaskBase) {
  (0, _inherits3.default)(MoveOwnershipFromMultiplexerTask, _TaskBase);

  function MoveOwnershipFromMultiplexerTask(multisigActions) {
    (0, _classCallCheck3.default)(this, MoveOwnershipFromMultiplexerTask);

    var _this = (0, _possibleConstructorReturn3.default)(this, (MoveOwnershipFromMultiplexerTask.__proto__ || Object.getPrototypeOf(MoveOwnershipFromMultiplexerTask)).call(this));

    _this.multisigActions = multisigActions;
    return _this;
  }

  (0, _createClass3.default)(MoveOwnershipFromMultiplexerTask, [{
    key: 'execute',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(args) {
        var _args, newOwnerAddress;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _args = (0, _slicedToArray3.default)(args, 1), newOwnerAddress = _args[0];

                if (!_web3_tools.utils.isAddress(newOwnerAddress)) {
                  _context.next = 6;
                  break;
                }

                _context.next = 4;
                return this.setOwnerships(newOwnerAddress);

              case 4:
                _context.next = 8;
                break;

              case 6:
                console.error('Wrong address, use: yarn task moveOwnershipFromMultiplexer [new owner address]');
                process.exit(1);

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function execute(_x) {
        return _ref.apply(this, arguments);
      }

      return execute;
    }()
  }, {
    key: 'setOwnerships',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(newOwnerAddress) {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt('return', this.multisigActions.transferContractsOwnership(newOwnerAddress));

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function setOwnerships(_x2) {
        return _ref2.apply(this, arguments);
      }

      return setOwnerships;
    }()
  }, {
    key: 'help',
    value: function help() {
      return {
        description: 'transfer contracts ownerships from the multiplexer contract'
      };
    }
  }]);
  return MoveOwnershipFromMultiplexerTask;
}(_task_base2.default);

exports.default = MoveOwnershipFromMultiplexerTask;