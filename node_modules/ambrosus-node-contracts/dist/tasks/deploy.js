'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _toArray2 = require('babel-runtime/helpers/toArray');

var _toArray3 = _interopRequireDefault(_toArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _task_base = require('./base/task_base');

var _task_base2 = _interopRequireDefault(_task_base);

var _commandLineArgs = require('command-line-args');

var _commandLineArgs2 = _interopRequireDefault(_commandLineArgs);

var _file = require('../utils/file');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DeployTask = function (_TaskBase) {
  (0, _inherits3.default)(DeployTask, _TaskBase);

  function DeployTask(deployActions) {
    (0, _classCallCheck3.default)(this, DeployTask);

    var _this = (0, _possibleConstructorReturn3.default)(this, (DeployTask.__proto__ || Object.getPrototypeOf(DeployTask)).call(this));

    _this.deployActions = deployActions;
    return _this;
  }

  (0, _createClass3.default)(DeployTask, [{
    key: 'execute',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(args) {
        var _args, command, remainingArgs;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _args = (0, _toArray3.default)(args), command = _args[0], remainingArgs = _args.slice(1);

                if (!(command === 'initial')) {
                  _context.next = 6;
                  break;
                }

                _context.next = 4;
                return this.deploy(true, remainingArgs);

              case 4:
                _context.next = 13;
                break;

              case 6:
                if (!(command === 'update')) {
                  _context.next = 11;
                  break;
                }

                _context.next = 9;
                return this.deploy(false, remainingArgs);

              case 9:
                _context.next = 13;
                break;

              case 11:
                console.error('Unknown sub-command, use: yarn task deploy [initial/update]');
                process.exit(1);

              case 13:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function execute(_x) {
        return _ref.apply(this, arguments);
      }

      return execute;
    }()
  }, {
    key: 'deploy',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(initial, args) {
        var options, contracts, multiplexerEnvLine;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                console.log('Deploying ' + (initial ? 'initial set of contracts' : 'contracts update') + '. This may take some time...');
                options = this.parseOptions(args);


                if (options.turbo) {
                  console.log('⚡️ Deploying in super speed mode. ⚡️');
                }

                contracts = void 0;

                if (!initial) {
                  _context2.next = 10;
                  break;
                }

                _context2.next = 7;
                return this.deployActions.deployInitial(options.turbo);

              case 7:
                contracts = _context2.sent;
                _context2.next = 13;
                break;

              case 10:
                _context2.next = 12;
                return this.deployActions.deployUpdate(options.turbo);

              case 12:
                contracts = _context2.sent;

              case 13:
                console.log('Current contract set: ');
                this.prettyPrintAddresses(contracts);

                multiplexerEnvLine = this.multiplexerToEnvFile(contracts.multiplexer);

                if (!options.save) {
                  _context2.next = 19;
                  break;
                }

                _context2.next = 19;
                return (0, _file.appendFile)(options.save, multiplexerEnvLine);

              case 19:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function deploy(_x2, _x3) {
        return _ref2.apply(this, arguments);
      }

      return deploy;
    }()
  }, {
    key: 'multiplexerToEnvFile',
    value: function multiplexerToEnvFile(multiplexerContract) {
      return 'MULTIPLEXER_CONTRACT_ADDRESS="' + multiplexerContract.options.address + '"\n';
    }
  }, {
    key: 'parseOptions',
    value: function parseOptions(args) {
      var options = (0, _commandLineArgs2.default)([{ name: 'turbo', type: Boolean }, { name: 'save', type: String }], { argv: args, partial: true });
      // eslint-disable-next-line no-underscore-dangle
      var unknownOptions = options._unknown;
      if (unknownOptions && unknownOptions.length > 0) {
        console.error('Unknown options: ' + unknownOptions.join(', '));
        process.exit(1);
      }

      if (options.save === null) {
        console.error('You should provide a value for the save parameter.');
        return null;
      }

      return options;
    }
  }, {
    key: 'prettyPrintAddresses',
    value: function prettyPrintAddresses(contracts) {
      return Object.entries(contracts).forEach(function (_ref3) {
        var _ref4 = (0, _slicedToArray3.default)(_ref3, 2),
            key = _ref4[0],
            contract = _ref4[1];

        return console.log('\t' + key + ' -> ' + contract.options.address);
      });
    }
  }, {
    key: 'help',
    value: function help() {
      return {
        description: 'deploys contracts'
      };
    }
  }]);
  return DeployTask;
}(_task_base2.default); /*
                        Copyright: Ambrosus Inc.
                        Email: tech@ambrosus.com
                        
                        This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
                        
                        This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
                        */

exports.default = DeployTask;