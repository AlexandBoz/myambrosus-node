'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var TaskList = function () {
  function TaskList() {
    (0, _classCallCheck3.default)(this, TaskList);

    this.tasks = {};
  }

  (0, _createClass3.default)(TaskList, [{
    key: 'add',
    value: function add(name, task) {
      this.tasks[name] = task;
    }
  }, {
    key: 'printHelp',
    value: function printHelp() {
      console.log('Available tasks:');
      var prepared = Object.entries(this.tasks).reduce(function (acc, _ref) {
        var _ref2 = (0, _slicedToArray3.default)(_ref, 2),
            name = _ref2[0],
            task = _ref2[1];

        var help = task.help();
        var leftColumn = name + (help.options ? ' ' + help.options : '');
        if (leftColumn.length > acc.leftColumnMax) {
          acc.leftColumnMax = leftColumn.length;
        }
        acc.entries.push([leftColumn, help.description]);
        return acc;
      }, {
        leftColumnMax: 0,
        entries: []
      });
      prepared.entries.forEach(function (_ref3) {
        var _ref4 = (0, _slicedToArray3.default)(_ref3, 2),
            leftColumn = _ref4[0],
            rightColumn = _ref4[1];

        console.log(' ' + leftColumn.padEnd(prepared.leftColumnMax) + '  - ' + rightColumn);
      });
      console.log();
    }
  }, {
    key: 'run',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(name, args) {
        var task;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                task = this.tasks[name];

                if (!task) {
                  _context.next = 6;
                  break;
                }

                _context.next = 4;
                return task.execute(args);

              case 4:
                _context.next = 8;
                break;

              case 6:
                console.error('Error: Could not find and execute task \'' + name + '\'.\n');
                this.printHelp();

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function run(_x, _x2) {
        return _ref5.apply(this, arguments);
      }

      return run;
    }()
  }]);
  return TaskList;
}();

exports.default = TaskList;