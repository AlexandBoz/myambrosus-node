'use strict';

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _file = require('../utils/file');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var stripContracts = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(contractsDir) {
    var contractFiles, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, contractFile, filePath, contract, stripedContract;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (contractsDirectory) {
              _context.next = 2;
              break;
            }

            throw new Error('Contracts directory not specified');

          case 2:
            console.log('Stripping contracts in \'' + contractsDirectory + '\'');
            _context.next = 5;
            return (0, _file.listDirectory)(contractsDir);

          case 5:
            contractFiles = _context.sent;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 9;
            _iterator = contractFiles[Symbol.iterator]();

          case 11:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 34;
              break;
            }

            contractFile = _step.value;
            _context.prev = 13;
            filePath = _path2.default.join(contractsDir, contractFile);

            if (!(_path2.default.extname(filePath) !== '.json')) {
              _context.next = 17;
              break;
            }

            return _context.abrupt('continue', 31);

          case 17:
            _context.t0 = JSON;
            _context.next = 20;
            return (0, _file.readFile)(filePath);

          case 20:
            _context.t1 = _context.sent;
            contract = _context.t0.parse.call(_context.t0, _context.t1);
            stripedContract = {
              contractName: contract.contractName,
              updatedAt: contract.updatedAt,
              abi: contract.abi,
              bytecode: contract.bytecode
            };
            _context.next = 25;
            return (0, _file.writeFile)(filePath, JSON.stringify(stripedContract, null, 2));

          case 25:
            console.log('\u2705 ' + contractFile);
            _context.next = 31;
            break;

          case 28:
            _context.prev = 28;
            _context.t2 = _context['catch'](13);

            console.log({ message: '\u274C ' + contractFile, error: _context.t2 });

          case 31:
            _iteratorNormalCompletion = true;
            _context.next = 11;
            break;

          case 34:
            _context.next = 40;
            break;

          case 36:
            _context.prev = 36;
            _context.t3 = _context['catch'](9);
            _didIteratorError = true;
            _iteratorError = _context.t3;

          case 40:
            _context.prev = 40;
            _context.prev = 41;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 43:
            _context.prev = 43;

            if (!_didIteratorError) {
              _context.next = 46;
              break;
            }

            throw _iteratorError;

          case 46:
            return _context.finish(43);

          case 47:
            return _context.finish(40);

          case 48:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[9, 36, 40, 48], [13, 28], [41,, 43, 47]]);
  }));

  return function stripContracts(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _process$argv = (0, _slicedToArray3.default)(process.argv, 3),
    contractsDirectory = _process$argv[2];

stripContracts(contractsDirectory).catch(function (exception) {
  console.error(exception);
  process.exit(1);
});