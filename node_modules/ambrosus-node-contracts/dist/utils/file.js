'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.appendEnvFile = exports.listDirectory = exports.checkFileExists = exports.readFile = exports.appendFile = exports.writeFile = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var writeFile = function writeFile(path, data) {
  return new Promise(function (resolve, reject) {
    _fs2.default.writeFile(path, data, function (err) {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
}; /*
   Copyright: Ambrosus Inc.
   Email: tech@ambrosus.com
   
   This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
   
   This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
   */

var readFile = function readFile(path) {
  return new Promise(function (resolve, reject) {
    _fs2.default.readFile(path, function (err, data) {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
};

var appendFile = function appendFile(path, data) {
  return new Promise(function (resolve, reject) {
    _fs2.default.appendFile(path, data, function (err) {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
};

var checkFileExists = function checkFileExists(path) {
  return new Promise(function (resolve) {
    _fs2.default.access(path, function (err) {
      resolve(!err);
    });
  });
};

var listDirectory = function listDirectory(path) {
  return new Promise(function (resolve, reject) {
    _fs2.default.readdir(path, function (err, files) {
      if (err) {
        reject(err);
      } else {
        resolve(files);
      }
    });
  });
};

var appendEnvFile = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(envFilePath, envFileData) {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return appendFile(envFilePath, envFileData);

          case 3:
            console.log('Env updated in ' + envFilePath + '.');
            _context.next = 9;
            break;

          case 6:
            _context.prev = 6;
            _context.t0 = _context['catch'](0);

            console.error('Unable to save configuration: ' + _context.t0);

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 6]]);
  }));

  return function appendEnvFile(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.writeFile = writeFile;
exports.appendFile = appendFile;
exports.readFile = readFile;
exports.checkFileExists = checkFileExists;
exports.listDirectory = listDirectory;
exports.appendEnvFile = appendEnvFile;