'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deployContract = exports.restoreSnapshot = exports.makeSnapshot = exports.createWeb3 = exports.createGanacheServer = exports.utils = exports.DEFAULT_GAS = undefined;

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var createGanacheServer = exports.createGanacheServer = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(secretKey) {
    var Ganache, server;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            Ganache = require('ganache-core');
            server = Ganache.server(getDefaultGanacheOptions(secretKey));
            _context.next = 4;
            return server.listen(DEFAULT_PORT);

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function createGanacheServer(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var ganacheTopUpDefaultAccount = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(web3) {
    var _ref4, _ref5, firstGanacheMasterAccount;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return web3.eth.getAccounts();

          case 2:
            _ref4 = _context2.sent;
            _ref5 = (0, _slicedToArray3.default)(_ref4, 1);
            firstGanacheMasterAccount = _ref5[0];
            _context2.next = 7;
            return web3.eth.sendTransaction({
              from: firstGanacheMasterAccount,
              to: getDefaultAddress(web3),
              value: web3.utils.toWei('10', 'ether'),
              gas: DEFAULT_GAS
            });

          case 7:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function ganacheTopUpDefaultAccount(_x2) {
    return _ref3.apply(this, arguments);
  };
}();

var createWeb3 = exports.createWeb3 = function () {
  var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
    var conf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _config2.default;
    var web3, rpc, account;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            web3 = new _web2.default();
            rpc = conf.web3Rpc;
            account = importPrivateKey(web3, conf);

            if (!isUsingGanache(rpc)) {
              _context3.next = 9;
              break;
            }

            web3.setProvider(createGanacheProvider(account.privateKey));
            _context3.next = 7;
            return ganacheTopUpDefaultAccount(web3);

          case 7:
            augmentWithSnapshotMethods(web3);
            return _context3.abrupt('return', web3);

          case 9:
            if (isValidRPCAddress(rpc)) {
              _context3.next = 11;
              break;
            }

            throw new Error('The config value for the Parity RPC server is invalid: ' + rpc);

          case 11:

            web3.setProvider(rpc);
            return _context3.abrupt('return', web3);

          case 13:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function createWeb3() {
    return _ref6.apply(this, arguments);
  };
}();

var makeSnapshot = exports.makeSnapshot = function () {
  var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(web3) {
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt('return', web3.eth.makeSnapshot());

          case 1:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function makeSnapshot(_x4) {
    return _ref7.apply(this, arguments);
  };
}();

var restoreSnapshot = exports.restoreSnapshot = function () {
  var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(web3, snapshotId) {
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt('return', web3.eth.restoreSnapshot(snapshotId));

          case 1:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  return function restoreSnapshot(_x5, _x6) {
    return _ref8.apply(this, arguments);
  };
}();

var deployContract = exports.deployContract = function () {
  var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(web3, json) {
    var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var defaultAddress;
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            defaultAddress = getDefaultAddress(web3);
            return _context6.abrupt('return', new web3.eth.Contract(json.abi, undefined, {
              gas: DEFAULT_GAS,
              gasPrice: web3.utils.toWei('5', 'gwei')
            }).deploy({ data: json.bytecode, arguments: args }).send((0, _extends3.default)({
              from: defaultAddress,
              gas: DEFAULT_GAS
            }, options)));

          case 2:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  return function deployContract(_x7, _x8) {
    return _ref9.apply(this, arguments);
  };
}();

exports.getDefaultAddress = getDefaultAddress;
exports.getDefaultPrivateKey = getDefaultPrivateKey;
exports.loadContract = loadContract;
exports.link = link;

var _web = require('web3');

var _web2 = _interopRequireDefault(_web);

var _config = require('../../config/config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Copyright: Ambrosus Inc.
Email: tech@ambrosus.com

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
*/

var DEFAULT_GAS = exports.DEFAULT_GAS = 6000000;
var DEFAULT_PORT = 8545;

var _ref = new _web2.default(),
    utils = _ref.utils;

exports.utils = utils;


function isValidRPCAddress(rpc) {
  return (/^((?:https?)|(?:ws)):\/\//g.test(rpc)
  );
}

function isUsingGanache(rpc) {
  return rpc === 'ganache';
}

function getDefaultGanacheOptions(secretKey) {
  if (!secretKey) {
    throw 'Secret key not defined';
  }
  return {
    accounts: [{
      balance: '10000000000000000000000000000000000',
      secretKey: secretKey
    }].concat((0, _toConsumableArray3.default)(Array(9).fill({ balance: '10000000000000000000000000000000000' }))),
    vmErrorsOnRPCResponse: false
  };
}

function createGanacheProvider(secretKey) {
  // import in code with purpose:D
  var Ganache = require('ganache-core');
  var memdown = require('memdown');
  return Ganache.provider((0, _extends3.default)({}, getDefaultGanacheOptions(secretKey), {
    db: memdown()
  }));
}

function augmentWithSnapshotMethods(web3) {
  web3.eth.extend({
    methods: [{
      name: 'makeSnapshot',
      call: 'evm_snapshot',
      params: 0,
      inputFormatter: [],
      outputFormatter: web3.utils.hexToNumberString
    }, {
      name: 'restoreSnapshot',
      call: 'evm_revert',
      params: 1,
      inputFormatter: [web3.utils.numberToHex]
    }]
  });
}

function importPrivateKey(web3, conf) {
  try {
    var nodePrivateKey = conf.nodePrivateKey;

    var account = web3.eth.accounts.privateKeyToAccount(nodePrivateKey);
    web3.eth.accounts.wallet.add(account);
    web3.eth.defaultAccount = account.address;
    return account;
  } catch (err) {
    throw new Error('A configuration value for web3 node private key is missing');
  }
}

function getDefaultAddress(web3) {
  // note: web3.eth.defaultAccount actually stores an address of the default account, and not the full account :P
  var defaultAccount = web3.eth.defaultAccount;

  if (!defaultAccount) {
    throw new Error('web3 doesn\'t have a default account set. Check your configuration');
  }
  return defaultAccount;
}

function getDefaultPrivateKey(web3) {
  var defaultAddress = getDefaultAddress(web3);
  var account = web3.eth.accounts.wallet[defaultAddress];
  return account.privateKey;
}

function loadContract(web3, abi, address) {
  return new web3.eth.Contract(abi, address, {
    gas: DEFAULT_GAS,
    gasPrice: web3.utils.toWei('5', 'gwei')
  });
}

function link(contract, name, library) {
  var address = library.options.address.replace('0x', '');
  var pattern = new RegExp('_+' + name + '_+', 'g');
  contract.bytecode = contract.bytecode.replace(pattern, address);
}