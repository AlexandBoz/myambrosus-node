'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InsufficientFundsToStartChallengeError = exports.InsufficientFundsToUploadBundleError = exports.AmbrosusError = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _web = require('web3');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extendableBuiltin(cls) {
  function ExtendableBuiltin() {
    var instance = Reflect.construct(cls, Array.from(arguments));
    Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
    return instance;
  }

  ExtendableBuiltin.prototype = Object.create(cls.prototype, {
    constructor: {
      value: cls,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ExtendableBuiltin, cls);
  } else {
    ExtendableBuiltin.__proto__ = cls;
  }

  return ExtendableBuiltin;
} /*
  Copyright: Ambrosus Inc.
  Email: tech@ambrosus.com
  
  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
  
  This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
  */

var AmbrosusError = exports.AmbrosusError = function (_extendableBuiltin2) {
  (0, _inherits3.default)(AmbrosusError, _extendableBuiltin2);

  function AmbrosusError(message) {
    (0, _classCallCheck3.default)(this, AmbrosusError);

    var _this = (0, _possibleConstructorReturn3.default)(this, (AmbrosusError.__proto__ || Object.getPrototypeOf(AmbrosusError)).call(this, message));

    _this.name = _this.constructor.name;
    Error.captureStackTrace(_this, _this.constructor);
    return _this;
  }

  return AmbrosusError;
}(_extendableBuiltin(Error));

var InsufficientFundsToUploadBundleError = exports.InsufficientFundsToUploadBundleError = function (_AmbrosusError) {
  (0, _inherits3.default)(InsufficientFundsToUploadBundleError, _AmbrosusError);

  function InsufficientFundsToUploadBundleError(fee, balance) {
    (0, _classCallCheck3.default)(this, InsufficientFundsToUploadBundleError);
    return (0, _possibleConstructorReturn3.default)(this, (InsufficientFundsToUploadBundleError.__proto__ || Object.getPrototypeOf(InsufficientFundsToUploadBundleError)).call(this, 'Insufficient funds: need at least ' + _web.utils.fromWei(fee, 'ether') + ' to upload the bundle. Balance: ' + _web.utils.fromWei(balance, 'ether')));
  }

  return InsufficientFundsToUploadBundleError;
}(AmbrosusError);

var InsufficientFundsToStartChallengeError = exports.InsufficientFundsToStartChallengeError = function (_AmbrosusError2) {
  (0, _inherits3.default)(InsufficientFundsToStartChallengeError, _AmbrosusError2);

  function InsufficientFundsToStartChallengeError(fee, balance) {
    (0, _classCallCheck3.default)(this, InsufficientFundsToStartChallengeError);
    return (0, _possibleConstructorReturn3.default)(this, (InsufficientFundsToStartChallengeError.__proto__ || Object.getPrototypeOf(InsufficientFundsToStartChallengeError)).call(this, 'Insufficient funds: need at least ' + _web.utils.fromWei(fee, 'ether') + ' to start a challenge. Balance: ' + _web.utils.fromWei(balance, 'ether')));
  }

  return InsufficientFundsToStartChallengeError;
}(AmbrosusError);