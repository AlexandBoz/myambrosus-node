'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _SafeMathExtensions = require('../src/contracts/SafeMathExtensions.json');

var _SafeMathExtensions2 = _interopRequireDefault(_SafeMathExtensions);

var _DmpAlgorithm = require('../src/contracts/DmpAlgorithm.json');

var _DmpAlgorithm2 = _interopRequireDefault(_DmpAlgorithm);

var _web3_tools = require('./utils/web3_tools');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getContractConstructor = function getContractConstructor(contractJson) {
  return contractJson.abi.find(function (value) {
    return value.type === 'constructor';
  });
}; /*
   Copyright: Ambrosus Inc.
   Email: tech@ambrosus.com
   
   This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
   
   This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.
   */

var Deployer = function () {
  function Deployer(web3, sender) {
    var gas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _web3_tools.DEFAULT_GAS;
    (0, _classCallCheck3.default)(this, Deployer);

    this.web3 = web3;
    this.sender = sender;
    this.gas = gas;
  }

  (0, _createClass3.default)(Deployer, [{
    key: 'deployLibs',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _web3_tools.deployContract)(this.web3, _SafeMathExtensions2.default, [], { from: this.sender });

              case 2:
                _context.t0 = _context.sent;
                _context.next = 5;
                return (0, _web3_tools.deployContract)(this.web3, _DmpAlgorithm2.default, [], { from: this.sender });

              case 5:
                _context.t1 = _context.sent;
                return _context.abrupt('return', {
                  SafeMathExtensions: _context.t0,
                  DmpAlgorithm: _context.t1
                });

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function deployLibs() {
        return _ref.apply(this, arguments);
      }

      return deployLibs;
    }()
  }, {
    key: 'deployOrLoadContracts',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(jsons, alreadyDeployed, skipDeployment, libs, params) {
        var _this = this;

        var contracts, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref3, _ref4, contractName, address, generateConstructorParameterList, waiting, resolveConstructorParameters, unresolvedParametersCount, _loop;

        return _regenerator2.default.wrap(function _callee2$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                contracts = {};

                // first load already deployed contracts

                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context3.prev = 4;
                _iterator = Object.entries(alreadyDeployed)[Symbol.iterator]();

              case 6:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context3.next = 17;
                  break;
                }

                _ref3 = _step.value;
                _ref4 = (0, _slicedToArray3.default)(_ref3, 2);
                contractName = _ref4[0];
                address = _ref4[1];
                _context3.next = 13;
                return this.loadContract(jsons[contractName], address);

              case 13:
                contracts[contractName] = _context3.sent;

              case 14:
                _iteratorNormalCompletion = true;
                _context3.next = 6;
                break;

              case 17:
                _context3.next = 23;
                break;

              case 19:
                _context3.prev = 19;
                _context3.t0 = _context3['catch'](4);
                _didIteratorError = true;
                _iteratorError = _context3.t0;

              case 23:
                _context3.prev = 23;
                _context3.prev = 24;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 26:
                _context3.prev = 26;

                if (!_didIteratorError) {
                  _context3.next = 29;
                  break;
                }

                throw _iteratorError;

              case 29:
                return _context3.finish(26);

              case 30:
                return _context3.finish(23);

              case 31:
                generateConstructorParameterList = function generateConstructorParameterList(jsons, params) {
                  return Object.entries(jsons).map(function (_ref5) {
                    var _ref6 = (0, _slicedToArray3.default)(_ref5, 2),
                        contractName = _ref6[0],
                        json = _ref6[1];

                    var constructorMethod = getContractConstructor(json);
                    var constructorParams = constructorMethod !== undefined ? constructorMethod.inputs.map(function (input) {
                      return { paramName: input.name.slice(1), paramType: input.type };
                    }) : [];
                    var resolvedParams = constructorParams.reduce(function (acc, _ref7) {
                      var paramName = _ref7.paramName;

                      if (params[contractName] !== undefined && params[contractName][paramName] !== undefined) {
                        acc[paramName] = params[contractName][paramName];
                      }
                      return acc;
                    }, {});
                    return {
                      contractName: contractName,
                      constructorParams: constructorParams,
                      resolvedParams: resolvedParams
                    };
                  });
                };

                // prepare constructor parameter list. Filter out skipped and already deployed contracts.


                waiting = generateConstructorParameterList(jsons, params).filter(function (_ref8) {
                  var contractName = _ref8.contractName;
                  return alreadyDeployed[contractName] === undefined;
                }).filter(function (_ref9) {
                  var contractName = _ref9.contractName;
                  return skipDeployment.indexOf(contractName) === -1;
                });

                resolveConstructorParameters = function resolveConstructorParameters(list, params) {
                  return list.map(function (entry) {
                    entry.constructorParams.forEach(function (_ref10) {
                      var paramName = _ref10.paramName,
                          paramType = _ref10.paramType;

                      if (entry.resolvedParams[paramName] !== undefined) {
                        return;
                      }
                      if (paramType === 'address' && params[paramName] !== undefined) {
                        entry.resolvedParams[paramName] = params[paramName];
                      }
                    });
                    return entry;
                  });
                };

                // resolve deployed contracts


                waiting = resolveConstructorParameters(waiting, alreadyDeployed);

                // resolve skipped contracts
                waiting = resolveConstructorParameters(waiting, skipDeployment.reduce(function (acc, key) {
                  acc[key] = '0x0';
                  return acc;
                }, {}));

                // iteratively deploy the waiting contracts

                unresolvedParametersCount = function unresolvedParametersCount(entry) {
                  return entry.constructorParams.length - Object.keys(entry.resolvedParams).length;
                };

                _loop = /*#__PURE__*/_regenerator2.default.mark(function _loop() {
                  var entry, unresolvedParameters, contract;
                  return _regenerator2.default.wrap(function _loop$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          waiting.sort(function (left, right) {
                            return unresolvedParametersCount(left) - unresolvedParametersCount(right);
                          });
                          entry = waiting.shift();

                          if (!(unresolvedParametersCount(entry) > 0)) {
                            _context2.next = 5;
                            break;
                          }

                          unresolvedParameters = entry.constructorParams.map(function (_ref11) {
                            var paramName = _ref11.paramName;
                            return paramName;
                          }).filter(function (paramName) {
                            return entry.resolvedParams[paramName] === undefined;
                          });
                          throw 'Failed to satisfy dependencies (' + unresolvedParameters + ') to deploy: ' + entry.contractName;

                        case 5:
                          _context2.next = 7;
                          return _this.deployContract(jsons[entry.contractName], entry.constructorParams.map(function (_ref12) {
                            var paramName = _ref12.paramName;
                            return entry.resolvedParams[paramName];
                          }), libs);

                        case 7:
                          contract = _context2.sent;

                          contracts[entry.contractName] = contract;
                          waiting = resolveConstructorParameters(waiting, (0, _defineProperty3.default)({}, entry.contractName, contract.options.address));

                        case 10:
                        case 'end':
                          return _context2.stop();
                      }
                    }
                  }, _loop, _this);
                });

              case 38:
                if (!(waiting.length > 0)) {
                  _context3.next = 42;
                  break;
                }

                return _context3.delegateYield(_loop(), 't1', 40);

              case 40:
                _context3.next = 38;
                break;

              case 42:
                return _context3.abrupt('return', contracts);

              case 43:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee2, this, [[4, 19, 23, 31], [24,, 26, 30]]);
      }));

      function deployOrLoadContracts(_x2, _x3, _x4, _x5, _x6) {
        return _ref2.apply(this, arguments);
      }

      return deployOrLoadContracts;
    }()
  }, {
    key: 'loadContract',
    value: function () {
      var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(json, address) {
        return _regenerator2.default.wrap(function _callee3$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt('return', (0, _web3_tools.loadContract)(this.web3, json.abi, address));

              case 1:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee3, this);
      }));

      function loadContract(_x7, _x8) {
        return _ref13.apply(this, arguments);
      }

      return loadContract;
    }()
  }, {
    key: 'deployContract',
    value: function () {
      var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(json, params, libs) {
        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _ref15, _ref16, libName, libContract;

        return _regenerator2.default.wrap(function _callee4$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // link with libraries
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context5.prev = 3;
                for (_iterator2 = Object.entries(libs)[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  _ref15 = _step2.value;
                  _ref16 = (0, _slicedToArray3.default)(_ref15, 2);
                  libName = _ref16[0];
                  libContract = _ref16[1];

                  (0, _web3_tools.link)(json, libName, libContract);
                }

                // deploy
                _context5.next = 11;
                break;

              case 7:
                _context5.prev = 7;
                _context5.t0 = _context5['catch'](3);
                _didIteratorError2 = true;
                _iteratorError2 = _context5.t0;

              case 11:
                _context5.prev = 11;
                _context5.prev = 12;

                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }

              case 14:
                _context5.prev = 14;

                if (!_didIteratorError2) {
                  _context5.next = 17;
                  break;
                }

                throw _iteratorError2;

              case 17:
                return _context5.finish(14);

              case 18:
                return _context5.finish(11);

              case 19:
                return _context5.abrupt('return', (0, _web3_tools.deployContract)(this.web3, json, params, { from: this.sender }));

              case 20:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee4, this, [[3, 7, 11, 19], [12,, 14, 18]]);
      }));

      function deployContract(_x9, _x10, _x11) {
        return _ref14.apply(this, arguments);
      }

      return deployContract;
    }()
  }, {
    key: 'deployContext',
    value: function () {
      var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(contextJson, contracts, versionTag) {
        return _regenerator2.default.wrap(function _callee5$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt('return', this.deployContract(contextJson, [Object.values(contracts).map(function (contract) {
                  return contract.options.address;
                }), contracts.catalogue.options.address, contracts.storageCatalogue.options.address, versionTag], []));

              case 1:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee5, this);
      }));

      function deployContext(_x12, _x13, _x14) {
        return _ref17.apply(this, arguments);
      }

      return deployContext;
    }()
  }, {
    key: 'updateContextPointer',
    value: function () {
      var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(contracts) {
        return _regenerator2.default.wrap(function _callee6$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return contracts.head.methods.setContext(contracts.context.options.address).send({
                  gas: this.gas,
                  from: this.sender
                });

              case 2:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee6, this);
      }));

      function updateContextPointer(_x15) {
        return _ref18.apply(this, arguments);
      }

      return updateContextPointer;
    }()
  }, {
    key: 'checkOwnership',
    value: function () {
      var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(contracts) {
        var _this2 = this;

        var checkRightOwner, validatorSet, blockRewards, head;
        return _regenerator2.default.wrap(function _callee8$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                checkRightOwner = function () {
                  var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(contract, contractName) {
                    var owner;
                    return _regenerator2.default.wrap(function _callee7$(_context8) {
                      while (1) {
                        switch (_context8.prev = _context8.next) {
                          case 0:
                            if (!(contract === undefined)) {
                              _context8.next = 2;
                              break;
                            }

                            return _context8.abrupt('return');

                          case 2:
                            _context8.next = 4;
                            return contract.methods.owner().call();

                          case 4:
                            owner = _context8.sent;

                            if (!(owner !== _this2.sender)) {
                              _context8.next = 7;
                              break;
                            }

                            throw 'The ' + contractName + ' contract needs to be owned by ' + _this2.sender + ' (the sender). The current owner is ' + owner;

                          case 7:
                          case 'end':
                            return _context8.stop();
                        }
                      }
                    }, _callee7, _this2);
                  }));

                  return function checkRightOwner(_x17, _x18) {
                    return _ref20.apply(this, arguments);
                  };
                }();

                validatorSet = contracts.validatorSet, blockRewards = contracts.blockRewards, head = contracts.head;
                _context9.next = 4;
                return checkRightOwner(head, 'head');

              case 4:
                _context9.next = 6;
                return checkRightOwner(validatorSet, 'validator set');

              case 6:
                _context9.next = 8;
                return checkRightOwner(blockRewards, 'block rewards');

              case 8:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee8, this);
      }));

      function checkOwnership(_x16) {
        return _ref19.apply(this, arguments);
      }

      return checkOwnership;
    }()
  }, {
    key: 'transferOwnerships',
    value: function () {
      var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(contracts) {
        var validatorSet, blockRewards, validatorProxy, validatorSetOwner, blockRewardsOwner;
        return _regenerator2.default.wrap(function _callee9$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                validatorSet = contracts.validatorSet, blockRewards = contracts.blockRewards, validatorProxy = contracts.validatorProxy;

                if (!(validatorSet !== undefined && validatorProxy !== undefined)) {
                  _context10.next = 14;
                  break;
                }

                _context10.next = 4;
                return validatorSet.methods.owner().call();

              case 4:
                validatorSetOwner = _context10.sent;

                if (!(validatorSetOwner === validatorProxy.options.address)) {
                  _context10.next = 8;
                  break;
                }

                _context10.next = 14;
                break;

              case 8:
                if (!(validatorSetOwner === this.sender)) {
                  _context10.next = 13;
                  break;
                }

                _context10.next = 11;
                return validatorSet.methods.transferOwnership(validatorProxy.options.address).send({ from: this.sender });

              case 11:
                _context10.next = 14;
                break;

              case 13:
                throw 'Failed to transfer ownership for validator set contract to validator proxy. The current owner ' + validatorSetOwner + ' remains';

              case 14:
                if (!(blockRewards !== undefined && validatorProxy !== undefined)) {
                  _context10.next = 27;
                  break;
                }

                _context10.next = 17;
                return blockRewards.methods.owner().call();

              case 17:
                blockRewardsOwner = _context10.sent;

                if (!(blockRewardsOwner === validatorProxy.options.address)) {
                  _context10.next = 21;
                  break;
                }

                _context10.next = 27;
                break;

              case 21:
                if (!(blockRewardsOwner === this.sender)) {
                  _context10.next = 26;
                  break;
                }

                _context10.next = 24;
                return contracts.blockRewards.methods.transferOwnership(validatorProxy.options.address).send({ from: this.sender });

              case 24:
                _context10.next = 27;
                break;

              case 26:
                throw 'Failed to transfer ownership for block rewards contract to validator proxy. The current owner ' + blockRewardsOwner + ' remains';

              case 27:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee9, this);
      }));

      function transferOwnerships(_x19) {
        return _ref21.apply(this, arguments);
      }

      return transferOwnerships;
    }()
  }, {
    key: 'deploy',
    value: function () {
      var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10(jsons, alreadyDeployed) {
        var skipDeployment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var versionTag = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '0';
        var libs, contextJson, jsonsWithoutContext, contracts;
        return _regenerator2.default.wrap(function _callee10$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.deployLibs();

              case 2:
                libs = _context11.sent;
                contextJson = jsons.context, jsonsWithoutContext = (0, _objectWithoutProperties3.default)(jsons, ['context']);
                _context11.next = 6;
                return this.deployOrLoadContracts(jsonsWithoutContext, alreadyDeployed, skipDeployment, libs, params);

              case 6:
                contracts = _context11.sent;
                _context11.next = 9;
                return this.checkOwnership(contracts);

              case 9:
                _context11.next = 11;
                return this.deployContext(contextJson, contracts, versionTag);

              case 11:
                contracts.context = _context11.sent;
                _context11.next = 14;
                return this.updateContextPointer(contracts);

              case 14:
                _context11.next = 16;
                return this.transferOwnerships(contracts);

              case 16:
                return _context11.abrupt('return', contracts);

              case 17:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee10, this);
      }));

      function deploy(_x20, _x21) {
        return _ref22.apply(this, arguments);
      }

      return deploy;
    }()
  }]);
  return Deployer;
}();

exports.default = Deployer;